// Generated by CoffeeScript 1.8.0
(function() {
  app.Router = (function() {
    $.extend(Router.prototype, Events);

    Router.routes = [['*', 'before'], ['/', 'root'], ['/offline', 'offline'], ['/about', 'about'], ['/news', 'news'], ['/help', 'help'], ['/:doc-:type/', 'type'], ['/:doc/', 'doc'], ['/:doc/:path(*)', 'entry'], ['*', 'notFound']];

    function Router() {
      var method, path, _i, _len, _ref, _ref1;
      _ref = this.constructor.routes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], path = _ref1[0], method = _ref1[1];
        page(path, this[method].bind(this));
      }
      this.setInitialPath();
    }

    Router.prototype.start = function() {
      page.start();
    };

    Router.prototype.show = function(path) {
      page.show(path);
    };

    Router.prototype.triggerRoute = function(name) {
      this.trigger(name, this.context);
      this.trigger('after', name, this.context);
    };

    Router.prototype.before = function(context, next) {
      this.context = context;
      this.trigger('before', context);
      next();
    };

    Router.prototype.doc = function(context, next) {
      var doc;
      if (doc = app.docs.findBy('slug', context.params.doc) || app.disabledDocs.findBy('slug', context.params.doc)) {
        context.doc = doc;
        context.entry = doc.toEntry();
        this.triggerRoute('entry');
      } else {
        next();
      }
    };

    Router.prototype.type = function(context, next) {
      var doc, type;
      doc = app.docs.findBy('slug', context.params.doc);
      if (type = doc != null ? doc.types.findBy('slug', context.params.type) : void 0) {
        context.doc = doc;
        context.type = type;
        this.triggerRoute('type');
      } else {
        next();
      }
    };

    Router.prototype.entry = function(context, next) {
      var doc, entry;
      doc = app.docs.findBy('slug', context.params.doc);
      if (entry = doc != null ? doc.findEntryByPathAndHash(context.params.path, context.hash) : void 0) {
        context.doc = doc;
        context.entry = entry;
        this.triggerRoute('entry');
      } else {
        next();
      }
    };

    Router.prototype.root = function() {
      if (app.isSingleDoc()) {
        setTimeout((function() {
          return window.location = '/';
        }), 0);
      } else {
        this.triggerRoute('root');
      }
    };

    Router.prototype.offline = function() {
      this.triggerRoute('offline');
    };

    Router.prototype.about = function(context) {
      context.page = 'about';
      this.triggerRoute('page');
    };

    Router.prototype.news = function(context) {
      context.page = 'news';
      this.triggerRoute('page');
    };

    Router.prototype.help = function(context) {
      context.page = 'help';
      this.triggerRoute('page');
    };

    Router.prototype.notFound = function(context) {
      this.triggerRoute('notFound');
    };

    Router.prototype.isRoot = function() {
      return location.pathname === '/';
    };

    Router.prototype.setInitialPath = function() {
      var path;
      if ((path = location.pathname.replace(/^\/{2,}/g, '/')) !== location.pathname) {
        page.replace(path + location.search + location.hash, null, true);
      }
      if (this.isRoot() && (path = this.getInitialPath())) {
        page.replace(path + location.search, null, true);
      }
    };

    Router.prototype.getInitialPath = function() {
      var _ref;
      try {
        return (_ref = (new RegExp("#/(.+)")).exec(decodeURIComponent(location.hash))) != null ? _ref[1] : void 0;
      } catch (_error) {

      }
    };

    Router.prototype.replaceHash = function(hash) {
      page.replace(location.pathname + location.search + (hash || ''), null, true);
    };

    return Router;

  })();

}).call(this);
