// Generated by CoffeeScript 1.8.0
(function() {
  var _init, _proto, _start, _super,
    __slice = [].slice;

  if (!((typeof console !== "undefined" && console !== null ? console.time : void 0) && console.groupCollapsed)) {
    return;
  }

  _init = app.init;

  app.init = function() {
    console.time('Init');
    _init.call(app);
    console.timeEnd('Init');
    return console.time('Load');
  };

  _start = app.start;

  app.start = function() {
    console.timeEnd('Load');
    console.time('Start');
    _start.call.apply(_start, [app].concat(__slice.call(arguments)));
    return console.timeEnd('Start');
  };

  _super = app.Searcher;

  _proto = app.Searcher.prototype;

  app.Searcher = function() {
    var _end, _kill, _match, _setup, _setupMatcher;
    _super.apply(this, arguments);
    _setup = this.setup.bind(this);
    this.setup = function() {
      console.groupCollapsed("Search: " + this.query);
      console.time('Total');
      return _setup();
    };
    _match = this.match.bind(this);
    this.match = (function(_this) {
      return function() {
        var entries, score, _i, _ref;
        if (_this.matcher) {
          console.timeEnd(_this.matcher.name);
          if (_this.matcher.name === 'exactMatch') {
            _ref = _this.scoreMap;
            for (score = _i = _ref.length - 1; _i >= 0; score = _i += -1) {
              entries = _ref[score];
              if (entries) {
                console.log('' + score + ': ' + entries.map(function(entry) {
                  return entry.text;
                }).join("\n    "));
              }
            }
          }
        }
        return _match();
      };
    })(this);
    _setupMatcher = this.setupMatcher.bind(this);
    this.setupMatcher = function() {
      console.time(this.matcher.name);
      return _setupMatcher();
    };
    _end = this.end.bind(this);
    this.end = function() {
      console.log("Results: " + this.totalResults);
      console.groupEnd();
      console.timeEnd('Total');
      return _end();
    };
    _kill = this.kill.bind(this);
    this.kill = function() {
      if (this.timeout) {
        if (this.matcher) {
          console.timeEnd(this.matcher.name);
        }
        console.groupEnd();
        console.timeEnd('Total');
        console.warn('Killed');
      }
      return _kill();
    };
  };

  _proto.constructor = app.Searcher;

  app.Searcher.prototype = _proto;

  this.viewTree = function(view, level) {
    var k, key, v, value;
    if (view == null) {
      view = app.document;
    }
    if (level == null) {
      level = 0;
    }
    console.log("%c " + (Array(level + 1).join('  ')) + view.constructor.name + ": " + view.activated, 'color:' + (view.activated && 'green' || 'red'));
    for (key in view) {
      value = view[key];
      if (key !== 'view' && value) {
        if (typeof value === 'object' && value.setupElement) {
          this.viewTree(value, level + 1);
        } else if (value.constructor.toString().match(/Object\(\)/)) {
          for (k in value) {
            v = value[k];
            if (value && typeof value === 'object' && value.setupElement) {
              this.viewTree(v, level + 1);
            }
          }
        }
      }
    }
  };

}).call(this);
