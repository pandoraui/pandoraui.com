// Generated by CoffeeScript 1.8.0

/*
 * Based on github.com/visionmedia/page.js
 * Licensed under the MIT license
 * Copyright 2012 TJ Holowaychuk <tj@vision-media.ca>
 */

(function() {
  var Context, Route, callbacks, currentPath, currentState, isSameOrigin, onclick, onpopstate, pathtoRegexp, running, track;

  running = false;

  currentState = null;

  callbacks = [];

  this.page = function(value, fn) {
    var route;
    if (typeof value === 'function') {
      page('*', value);
    } else if (typeof fn === 'function') {
      route = new Route(value);
      callbacks.push(route.middleware(fn));
    } else if (typeof value === 'string') {
      page.show(value, fn);
    } else {
      page.start(value);
    }
  };

  page.start = function(options) {
    if (options == null) {
      options = {};
    }
    if (!running) {
      running = true;
      addEventListener('popstate', onpopstate);
      addEventListener('click', onclick);
      page.replace(currentPath(), null, null, true);
    }
  };

  page.stop = function() {
    if (running) {
      running = false;
      removeEventListener('click', onclick);
      removeEventListener('popstate', onpopstate);
    }
  };

  page.show = function(path, state) {
    var context;
    if (path === (currentState != null ? currentState.path : void 0)) {
      return;
    }
    context = new Context(path, state);
    currentState = context.state;
    page.dispatch(context);
    context.pushState();
    track();
    return context;
  };

  page.replace = function(path, state, skipDispatch, init) {
    var context;
    context = new Context(path, state || currentState);
    context.init = init;
    currentState = context.state;
    if (!skipDispatch) {
      page.dispatch(context);
    }
    context.replaceState();
    if (!(init || skipDispatch)) {
      track();
    }
    return context;
  };

  page.dispatch = function(context) {
    var i, next;
    i = 0;
    next = function() {
      var fn;
      if (fn = callbacks[i++]) {
        fn(context, next);
      }
    };
    next();
  };

  currentPath = function() {
    return location.pathname + location.search + location.hash;
  };

  Context = (function() {
    Context.initialPath = currentPath();

    Context.sessionId = Date.now();

    Context.stateId = 0;

    Context.isInitialPopState = function(state) {
      return state.path === this.initialPath && this.stateId === 1;
    };

    Context.isSameSession = function(state) {
      return state.sessionId === this.sessionId;
    };

    function Context(path, state) {
      var _base, _base1;
      this.path = path != null ? path : '/';
      this.state = state != null ? state : {};
      this.pathname = this.path.replace(/(?:\?([^#]*))?(?:#(.*))?$/, (function(_this) {
        return function(_, query, hash) {
          _this.query = query;
          _this.hash = hash;
          return '';
        };
      })(this));
      if ((_base = this.state).id == null) {
        _base.id = this.constructor.stateId++;
      }
      if ((_base1 = this.state).sessionId == null) {
        _base1.sessionId = this.constructor.sessionId;
      }
      this.state.path = this.path;
    }

    Context.prototype.pushState = function() {
      history.pushState(this.state, '', this.path);
    };

    Context.prototype.replaceState = function() {
      history.replaceState(this.state, '', this.path);
    };

    return Context;

  })();

  Route = (function() {
    function Route(path, options) {
      this.path = path;
      if (options == null) {
        options = {};
      }
      this.keys = [];
      this.regexp = pathtoRegexp(this.path, this.keys);
    }

    Route.prototype.middleware = function(fn) {
      return (function(_this) {
        return function(context, next) {
          var params;
          if (_this.match(context.pathname, params = [])) {
            context.params = params;
            fn(context, next);
          } else {
            next();
          }
        };
      })(this);
    };

    Route.prototype.match = function(path, params) {
      var i, key, matchData, value, _i, _len, _ref;
      if (!(matchData = this.regexp.exec(path))) {
        return;
      }
      _ref = matchData.slice(1);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        value = _ref[i];
        if (typeof value === 'string') {
          value = decodeURIComponent(value);
        }
        if (key = this.keys[i]) {
          params[key.name] = value;
        } else {
          params.push(value);
        }
      }
      return true;
    };

    return Route;

  })();

  pathtoRegexp = function(path, keys) {
    if (path instanceof RegExp) {
      return path;
    }
    if (path instanceof Array) {
      path = "(" + (path.join('|')) + ")";
    }
    path = path.replace(/\/\(/g, '(?:/').replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional) {
      var str;
      if (slash == null) {
        slash = '';
      }
      if (format == null) {
        format = '';
      }
      keys.push({
        name: key,
        optional: !!optional
      });
      str = optional ? '' : slash;
      str += '(?:';
      if (optional) {
        str += slash;
      }
      str += format;
      str += capture || (format ? '([^/.]+?)' : '([^/]+?)');
      str += ')';
      if (optional) {
        str += optional;
      }
      return str;
    }).replace(/([\/.])/g, '\\$1').replace(/\*/g, '(.*)');
    return new RegExp("^" + path + "$");
  };

  onpopstate = function(event) {
    if (!event.state || Context.isInitialPopState(event.state)) {
      return;
    }
    if (Context.isSameSession(event.state)) {
      page.replace(event.state.path, event.state);
    } else {
      location.reload();
    }
  };

  onclick = function(event) {
    var link;
    if (event.which !== 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.defaultPrevented) {
      return;
    }
    link = event.target;
    while (link && link.tagName !== 'A') {
      link = link.parentElement;
    }
    if (link && !link.target && isSameOrigin(link.href)) {
      event.preventDefault();
      page.show(link.pathname + link.search + link.hash);
    }
  };

  isSameOrigin = function(url) {
    return url.indexOf("" + location.protocol + "//" + location.hostname) === 0;
  };

  track = function() {
    if (typeof ga === "function") {
      ga('send', 'pageview', location.pathname + location.search + location.hash);
    }
    if (typeof _gauges !== "undefined" && _gauges !== null) {
      _gauges.push(['track']);
    }
  };

}).call(this);
