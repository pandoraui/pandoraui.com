// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.EntryPage = (function(_super) {
    __extends(EntryPage, _super);

    function EntryPage() {
      this.onClick = __bind(this.onClick, this);
      this.onError = __bind(this.onError, this);
      this.onSuccess = __bind(this.onSuccess, this);
      this.beforeRoute = __bind(this.beforeRoute, this);
      return EntryPage.__super__.constructor.apply(this, arguments);
    }

    EntryPage.className = '_page';

    EntryPage.events = {
      click: 'onClick'
    };

    EntryPage.routes = {
      before: 'beforeRoute'
    };

    EntryPage.prototype.init = function() {
      this.cacheMap = {};
      this.cacheStack = [];
    };

    EntryPage.prototype.deactivate = function() {
      if (EntryPage.__super__.deactivate.apply(this, arguments)) {
        this.empty();
        this.entry = null;
      }
    };

    EntryPage.prototype.loading = function() {
      this.empty();
      this.trigger('loading');
    };

    EntryPage.prototype.render = function(content) {
      if (content == null) {
        content = '';
      }
      if (!this.activated) {
        return;
      }
      this.empty();
      this.subview = new (this.subViewClass())(this.el, this.entry);
      this.subview.render(content);
      if (app.disabledDocs.findBy('slug', this.entry.doc.slug)) {
        this.hiddenView = new app.views.HiddenPage(this.el, this.entry);
      }
      this.trigger('loaded');
    };

    EntryPage.prototype.empty = function() {
      var _ref, _ref1;
      if ((_ref = this.subview) != null) {
        _ref.deactivate();
      }
      this.subview = null;
      if ((_ref1 = this.hiddenView) != null) {
        _ref1.deactivate();
      }
      this.hiddenView = null;
      this.resetClass();
      EntryPage.__super__.empty.apply(this, arguments);
    };

    EntryPage.prototype.subViewClass = function() {
      var docType;
      docType = this.entry.doc.type;
      return app.views["" + (docType[0].toUpperCase()) + docType.slice(1) + "Page"] || app.views.BasePage;
    };

    EntryPage.prototype.getTitle = function() {
      return this.entry.doc.name + (this.entry.isIndex() ? '' : "/" + this.entry.name);
    };

    EntryPage.prototype.beforeRoute = function() {
      this.abort();
      this.cache();
    };

    EntryPage.prototype.onRoute = function(context) {
      var isSameFile, _ref;
      isSameFile = context.entry.filePath() === ((_ref = this.entry) != null ? _ref.filePath() : void 0);
      this.entry = context.entry;
      if (!isSameFile) {
        this.restore() || this.load();
      }
    };

    EntryPage.prototype.load = function() {
      this.loading();
      this.xhr = this.entry.loadFile(this.onSuccess, this.onError);
    };

    EntryPage.prototype.abort = function() {
      if (this.xhr) {
        this.xhr.abort();
        this.xhr = null;
      }
    };

    EntryPage.prototype.onSuccess = function(response) {
      this.xhr = null;
      this.render(response);
    };

    EntryPage.prototype.onError = function() {
      var _ref;
      this.xhr = null;
      this.render(this.tmpl('pageLoadError'));
      if ((_ref = app.appCache) != null) {
        _ref.update();
      }
    };

    EntryPage.prototype.cache = function() {
      var path;
      if (!this.entry || this.cacheMap[path = this.entry.filePath()]) {
        return;
      }
      this.cacheMap[path] = this.el.innerHTML;
      this.cacheStack.push(path);
      while (this.cacheStack.length > app.config.history_cache_size) {
        delete this.cacheMap[this.cacheStack.shift()];
      }
    };

    EntryPage.prototype.restore = function() {
      var path;
      if (this.cacheMap[path = this.entry.filePath()]) {
        this.render(this.cacheMap[path]);
        return true;
      }
    };

    EntryPage.prototype.onClick = function(event) {
      if (event.target.hasAttribute('data-retry')) {
        $.stopEvent(event);
        this.load();
      }
    };

    return EntryPage;

  })(app.View);

}).call(this);
