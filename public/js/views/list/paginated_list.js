// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.PaginatedList = (function(_super) {
    var PER_PAGE;

    __extends(PaginatedList, _super);

    PER_PAGE = app.config.max_results;

    function PaginatedList(data) {
      var _base, _base1;
      this.data = data;
      this.onClick = __bind(this.onClick, this);
      if ((_base = ((_base1 = this.constructor).events || (_base1.events = {}))).click == null) {
        _base.click = 'onClick';
      }
      PaginatedList.__super__.constructor.apply(this, arguments);
    }

    PaginatedList.prototype.renderPaginated = function() {
      this.page = 0;
      if (this.totalPages() > 1) {
        this.paginateNext();
      } else {
        this.html(this.renderAll());
      }
    };

    PaginatedList.prototype.renderAll = function() {
      return this.render(this.data);
    };

    PaginatedList.prototype.renderPage = function(page) {
      return this.render(this.data.slice((page - 1) * PER_PAGE, page * PER_PAGE));
    };

    PaginatedList.prototype.renderPageLink = function(count) {
      return this.tmpl('sidebarPageLink', count);
    };

    PaginatedList.prototype.renderPrevLink = function(page) {
      return this.renderPageLink((page - 1) * PER_PAGE);
    };

    PaginatedList.prototype.renderNextLink = function(page) {
      return this.renderPageLink(this.data.length - page * PER_PAGE);
    };

    PaginatedList.prototype.totalPages = function() {
      return Math.ceil(this.data.length / PER_PAGE);
    };

    PaginatedList.prototype.paginate = function(link) {
      $.lockScroll(link.nextSibling || link.previousSibling, (function(_this) {
        return function() {
          $.batchUpdate(_this.el, function() {
            if (link.nextSibling) {
              _this.paginatePrev(link);
            } else {
              _this.paginateNext(link);
            }
          });
        };
      })(this));
    };

    PaginatedList.prototype.paginateNext = function() {
      if (this.el.lastChild) {
        this.remove(this.el.lastChild);
      }
      if (this.page >= 2) {
        this.hideTopPage();
      }
      this.page++;
      this.append(this.renderPage(this.page));
      if (this.page < this.totalPages()) {
        this.append(this.renderNextLink(this.page));
      }
    };

    PaginatedList.prototype.paginatePrev = function() {
      this.remove(this.el.firstChild);
      this.hideBottomPage();
      this.page--;
      this.prepend(this.renderPage(this.page - 1));
      if (this.page >= 3) {
        this.prepend(this.renderPrevLink(this.page - 1));
      }
    };

    PaginatedList.prototype.paginateTo = function(object) {
      var index, _i, _ref;
      index = this.data.indexOf(object);
      if (index >= PER_PAGE) {
        for (_i = 0, _ref = Math.floor(index / PER_PAGE); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
          this.paginateNext();
        }
      }
    };

    PaginatedList.prototype.hideTopPage = function() {
      var n, _i;
      n = this.page <= 2 ? PER_PAGE : PER_PAGE + 1;
      for (_i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--) {
        this.remove(this.el.firstChild);
      }
      this.prepend(this.renderPrevLink(this.page));
    };

    PaginatedList.prototype.hideBottomPage = function() {
      var n, _i;
      n = this.page === this.totalPages() ? this.data.length % PER_PAGE || PER_PAGE : PER_PAGE + 1;
      for (_i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--) {
        this.remove(this.el.lastChild);
      }
      this.append(this.renderNextLink(this.page - 1));
    };

    PaginatedList.prototype.onClick = function(event) {
      if (event.target.tagName === 'SPAN') {
        $.stopEvent(event);
        this.paginate(event.target);
      }
    };

    return PaginatedList;

  })(app.View);

}).call(this);
