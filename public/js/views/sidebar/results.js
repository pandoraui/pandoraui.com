// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.Results = (function(_super) {
    __extends(Results, _super);

    Results.className = '_list';

    Results.routes = {
      after: 'afterRoute'
    };

    function Results(search) {
      this.search = search;
      this.afterRoute = __bind(this.afterRoute, this);
      this.onClear = __bind(this.onClear, this);
      this.onNoResults = __bind(this.onNoResults, this);
      this.onResults = __bind(this.onResults, this);
      Results.__super__.constructor.apply(this, arguments);
    }

    Results.prototype.deactivate = function() {
      if (Results.__super__.deactivate.apply(this, arguments)) {
        this.empty();
      }
    };

    Results.prototype.init = function() {
      this.addSubview(this.listSelect = new app.views.ListSelect(this.el));
      if (!app.isMobile()) {
        this.addSubview(this.listFocus = new app.views.ListFocus(this.el));
      }
      this.search.on('results', this.onResults).on('noresults', this.onNoResults).on('clear', this.onClear);
    };

    Results.prototype.onResults = function(entries, flags) {
      var _ref;
      if (flags.initialResults) {
        if ((_ref = this.listFocus) != null) {
          _ref.blur();
        }
      }
      if (flags.initialResults) {
        this.empty();
      }
      this.append(this.tmpl('sidebarResult', entries));
      if (flags.initialResults) {
        if (flags.urlSearch) {
          this.openFirst();
        } else {
          this.focusFirst();
        }
      }
    };

    Results.prototype.onNoResults = function() {
      this.html(this.tmpl('sidebarNoResults'));
    };

    Results.prototype.onClear = function() {
      this.empty();
    };

    Results.prototype.focusFirst = function() {
      var _ref;
      if ((_ref = this.listFocus) != null) {
        _ref.focus(this.el.firstElementChild);
      }
    };

    Results.prototype.openFirst = function() {
      var _ref;
      if ((_ref = this.el.firstElementChild) != null) {
        _ref.click();
      }
    };

    Results.prototype.afterRoute = function(route, context) {
      if (route === 'entry') {
        this.listSelect.selectByHref(context.entry.fullPath());
      } else {
        this.listSelect.deselect();
      }
    };

    return Results;

  })(app.View);

}).call(this);
