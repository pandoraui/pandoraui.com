// Generated by CoffeeScript 1.8.0
(function() {
  var isPointerEventsSupported,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.SidebarHover = (function(_super) {
    __extends(SidebarHover, _super);

    SidebarHover.itemClass = '_list-hover';

    SidebarHover.events = {
      focus: 'onFocus',
      blur: 'onBlur',
      mouseover: 'onMouseover',
      mouseout: 'onMouseout',
      scroll: 'onScroll',
      click: 'onClick'
    };

    SidebarHover.routes = {
      after: 'onRoute'
    };

    function SidebarHover(el) {
      this.el = el;
      this.onRoute = __bind(this.onRoute, this);
      this.onClick = __bind(this.onClick, this);
      this.onScroll = __bind(this.onScroll, this);
      this.onMouseout = __bind(this.onMouseout, this);
      this.onMouseover = __bind(this.onMouseover, this);
      this.onBlur = __bind(this.onBlur, this);
      this.onFocus = __bind(this.onFocus, this);
      this.position = __bind(this.position, this);
      if (!isPointerEventsSupported()) {
        delete this.constructor.events.mouseover;
      }
      SidebarHover.__super__.constructor.apply(this, arguments);
    }

    SidebarHover.prototype.init = function() {
      this.offsetTop = this.el.offsetTop;
    };

    SidebarHover.prototype.show = function(el) {
      if (el !== this.cursor) {
        this.hide();
        if (this.isTarget(el) && this.isTruncated(el)) {
          this.cursor = el;
          this.clone = this.makeClone(this.cursor);
          $.append(document.body, this.clone);
          this.position();
        }
      }
    };

    SidebarHover.prototype.hide = function() {
      if (this.cursor) {
        $.remove(this.clone);
        this.cursor = this.clone = null;
      }
    };

    SidebarHover.prototype.position = function() {
      var top;
      if (this.cursor) {
        top = $.rect(this.cursor).top;
        if (top >= this.offsetTop) {
          this.clone.style.top = top + 'px';
        } else {
          this.hide();
        }
      }
    };

    SidebarHover.prototype.makeClone = function(el) {
      var clone;
      clone = el.cloneNode();
      clone.textContent = el.textContent;
      clone.classList.add('clone');
      return clone;
    };

    SidebarHover.prototype.isTarget = function(el) {
      return el.classList.contains(this.constructor.itemClass);
    };

    SidebarHover.prototype.isSelected = function(el) {
      return el.classList.contains('active');
    };

    SidebarHover.prototype.isTruncated = function(el) {
      return el.scrollWidth > el.offsetWidth;
    };

    SidebarHover.prototype.onFocus = function(event) {
      this.focusTime = Date.now();
      this.show(event.target);
    };

    SidebarHover.prototype.onBlur = function() {
      this.hide();
    };

    SidebarHover.prototype.onMouseover = function(event) {
      if (this.isTarget(event.target) && !this.isSelected(event.target) && this.mouseActivated()) {
        this.show(event.target);
      }
    };

    SidebarHover.prototype.onMouseout = function(event) {
      if (this.isTarget(event.target) && this.mouseActivated()) {
        this.hide();
      }
    };

    SidebarHover.prototype.mouseActivated = function() {
      return !this.focusTime || Date.now() - this.focusTime > 500;
    };

    SidebarHover.prototype.onScroll = function() {
      this.position();
    };

    SidebarHover.prototype.onClick = function(event) {
      if (event.target === this.clone) {
        $.click(this.cursor);
      }
    };

    SidebarHover.prototype.onRoute = function() {
      this.hide();
    };

    return SidebarHover;

  })(app.View);

  isPointerEventsSupported = function() {
    var el;
    el = document.createElement('div');
    el.style.cssText = 'pointer-events: auto';
    return el.style.pointerEvents === 'auto';
  };

}).call(this);
