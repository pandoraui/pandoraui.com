// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  app.DB = (function() {
    var NAME;

    NAME = 'docs';

    function DB() {
      this.onOpenError = __bind(this.onOpenError, this);
      this.onOpenSuccess = __bind(this.onOpenSuccess, this);
      this.useIndexedDB = this.useIndexedDB();
      this.indexedDBVersion = this.indexedDBVersion();
      this.callbacks = [];
    }

    DB.prototype.db = function(fn) {
      var req;
      if (!this.useIndexedDB) {
        return fn();
      }
      this.callbacks.push(fn);
      if (this.open) {
        return;
      }
      try {
        this.open = true;
        req = indexedDB.open(NAME, this.indexedDBVersion);
        req.onsuccess = this.onOpenSuccess;
        req.onerror = this.onOpenError;
        req.onupgradeneeded = this.onUpgradeNeeded;
      } catch (_error) {
        this.onOpenError();
      }
    };

    DB.prototype.onOpenSuccess = function(event) {
      var db;
      try {
        db = event.target.result;
        if (!this.checkedBuggyIDB) {
          this.idbTransaction(db, {
            stores: ['docs', app.docs.all()[0].slug],
            mode: 'readwrite'
          }).abort();
          this.checkedBuggyIDB = true;
        }
      } catch (_error) {
        try {
          db.close();
        } catch (_error) {}
        this.onOpenError();
        return;
      }
      this.runCallbacks(db);
      this.open = false;
      db.close();
    };

    DB.prototype.onOpenError = function(event) {
      if (event != null) {
        event.preventDefault();
      }
      this.useIndexedDB = this.open = false;
      this.runCallbacks();
    };

    DB.prototype.runCallbacks = function(db) {
      var fn;
      while (fn = this.callbacks.shift()) {
        fn(db);
      }
    };

    DB.prototype.onUpgradeNeeded = function(event) {
      var db, doc, _i, _j, _len, _len1, _ref, _ref1;
      db = event.target.result;
      if (!db.objectStoreNames.contains('docs')) {
        db.createObjectStore('docs');
      }
      _ref = app.docs.all();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        doc = _ref[_i];
        if (!db.objectStoreNames.contains(doc.slug)) {
          db.createObjectStore(doc.slug);
        }
      }
      _ref1 = app.disabledDocs.all();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        doc = _ref1[_j];
        if (!db.objectStoreNames.contains(doc.slug)) {
          db.createObjectStore(doc.slug);
        }
      }
    };

    DB.prototype.store = function(doc, data, onSuccess, onError) {
      this.db((function(_this) {
        return function(db) {
          var content, path, store, txn;
          if (!db) {
            onError();
            return;
          }
          txn = _this.idbTransaction(db, {
            stores: ['docs', doc.slug],
            mode: 'readwrite',
            ignoreError: false
          });
          txn.oncomplete = function() {
            var _ref;
            if ((_ref = _this.cachedDocs) != null) {
              _ref[doc.slug] = doc.mtime;
            }
            onSuccess();
          };
          txn.onerror = function(event) {
            event.preventDefault();
            onError(event);
          };
          store = txn.objectStore(doc.slug);
          store.clear();
          for (path in data) {
            content = data[path];
            store.add(content, path);
          }
          store = txn.objectStore('docs');
          store.put(doc.mtime, doc.slug);
        };
      })(this));
    };

    DB.prototype.unstore = function(doc, onSuccess, onError) {
      this.db((function(_this) {
        return function(db) {
          var store, txn;
          if (!db) {
            onError();
            return;
          }
          txn = _this.idbTransaction(db, {
            stores: ['docs', doc.slug],
            mode: 'readwrite',
            ignoreError: false
          });
          txn.oncomplete = function() {
            var _ref;
            if ((_ref = _this.cachedDocs) != null) {
              delete _ref[doc.slug];
            }
            onSuccess();
          };
          txn.onerror = function(event) {
            event.preventDefault();
            onError(event);
          };
          store = txn.objectStore(doc.slug);
          store.clear();
          store = txn.objectStore('docs');
          store["delete"](doc.slug);
        };
      })(this));
    };

    DB.prototype.version = function(doc, fn) {
      var version;
      if ((version = this.cachedVersion(doc)) != null) {
        fn(version);
        return;
      }
      this.db((function(_this) {
        return function(db) {
          var req, store, txn;
          if (!db) {
            fn(false);
            return;
          }
          txn = _this.idbTransaction(db, {
            stores: ['docs'],
            mode: 'readonly'
          });
          store = txn.objectStore('docs');
          req = store.get(doc.slug);
          req.onsuccess = function() {
            fn(req.result);
          };
          req.onerror = function(event) {
            event.preventDefault();
            fn(false);
          };
        };
      })(this));
    };

    DB.prototype.cachedVersion = function(doc) {
      if (!this.cachedDocs) {
        return;
      }
      return this.cachedDocs[doc.slug] || false;
    };

    DB.prototype.versions = function(docs, fn) {
      var versions;
      if (versions = this.cachedVersions(docs)) {
        fn(versions);
        return;
      }
      return this.db((function(_this) {
        return function(db) {
          var result, store, txn;
          if (!db) {
            fn(false);
            return;
          }
          txn = _this.idbTransaction(db, {
            stores: ['docs'],
            mode: 'readonly'
          });
          txn.oncomplete = function() {
            fn(result);
          };
          store = txn.objectStore('docs');
          result = {};
          docs.forEach(function(doc) {
            var req;
            req = store.get(doc.slug);
            req.onsuccess = function() {
              result[doc.slug] = req.result;
            };
            req.onerror = function(event) {
              event.preventDefault();
              result[doc.slug] = false;
            };
          });
        };
      })(this));
    };

    DB.prototype.cachedVersions = function(docs) {
      var doc, result, _i, _len;
      if (!this.cachedDocs) {
        return;
      }
      result = {};
      for (_i = 0, _len = docs.length; _i < _len; _i++) {
        doc = docs[_i];
        result[doc.slug] = this.cachedVersion(doc);
      }
      return result;
    };

    DB.prototype.load = function(entry, onSuccess, onError) {
      if (this.shouldLoadWithIDB(entry)) {
        onError = this.loadWithXHR.bind(this, entry, onSuccess, onError);
        return this.loadWithIDB(entry, onSuccess, onError);
      } else {
        return this.loadWithXHR(entry, onSuccess, onError);
      }
    };

    DB.prototype.loadWithXHR = function(entry, onSuccess, onError) {
      return ajax({
        url: entry.fileUrl(),
        dataType: 'html',
        success: onSuccess,
        error: onError
      });
    };

    DB.prototype.loadWithIDB = function(entry, onSuccess, onError) {
      return this.db((function(_this) {
        return function(db) {
          var req, store, txn;
          if (!db) {
            onError();
            return;
          }
          txn = _this.idbTransaction(db, {
            stores: [entry.doc.slug],
            mode: 'readonly'
          });
          store = txn.objectStore(entry.doc.slug);
          req = store.get(entry.dbPath());
          req.onsuccess = function() {
            if (req.result) {
              onSuccess(req.result);
            } else {
              onError();
            }
          };
          req.onerror = function(event) {
            event.preventDefault();
            onError();
          };
          if (!_this.cachedDocs) {
            _this.loadDocsCache(db);
          }
        };
      })(this));
    };

    DB.prototype.loadDocsCache = function(db) {
      var req, store, txn;
      this.cachedDocs = {};
      txn = this.idbTransaction(db, {
        stores: ['docs'],
        mode: 'readonly'
      });
      store = txn.objectStore('docs');
      req = store.openCursor();
      req.onsuccess = (function(_this) {
        return function(event) {
          var cursor;
          if (!(cursor = event.target.result)) {
            return;
          }
          _this.cachedDocs[cursor.key] = cursor.value;
          cursor["continue"]();
        };
      })(this);
      req.onerror = function(event) {
        event.preventDefault();
      };
    };

    DB.prototype.shouldLoadWithIDB = function(entry) {
      return this.useIndexedDB && (!this.cachedDocs || this.cachedDocs[entry.doc.slug]);
    };

    DB.prototype.idbTransaction = function(db, options) {
      var txn;
      txn = db.transaction(options.stores, options.mode);
      if (options.ignoreError !== false) {
        txn.onerror = function(event) {
          event.preventDefault();
        };
      }
      if (options.ignoreAbort !== false) {
        txn.onabort = function(event) {
          event.preventDefault();
        };
      }
      return txn;
    };

    DB.prototype.reset = function() {
      try {
        if (typeof indexedDB !== "undefined" && indexedDB !== null) {
          indexedDB.deleteDatabase(NAME);
        }
      } catch (_error) {

      }
    };

    DB.prototype.useIndexedDB = function() {
      try {
        return !app.isSingleDoc() && !!window.indexedDB;
      } catch (_error) {
        return false;
      }
    };

    DB.prototype.indexedDBVersion = function() {
      if (app.config.env === 'production') {
        return app.config.version;
      } else {
        return Date.now() / 1000;
      }
    };

    return DB;

  })();

}).call(this);
