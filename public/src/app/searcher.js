// Generated by CoffeeScript 1.8.0
(function() {
  var SEPARATOR, fuzzyRegexp, i, index, lastIndex, match, matchIndex, matchLength, matcher, query, queryLength, score, separators, value, valueLength,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SEPARATOR = '.';

  query = queryLength = value = valueLength = matcher = fuzzyRegexp = index = lastIndex = match = matchIndex = matchLength = score = separators = i = null;

  function exactMatch() {;

  index = value.indexOf(query);

  if (!(index >= 0)) {
    return;
  }

  lastIndex = value.lastIndexOf(query);

  if (index !== lastIndex) {
    return Math.max(scoreExactMatch(), (index = lastIndex) && scoreExactMatch());
  } else {
    return scoreExactMatch();
  }

  };

  function scoreExactMatch() {;

  score = 100 - (valueLength - queryLength);

  if (index > 0) {
    if (value.charAt(index - 1) === SEPARATOR) {
      score += index - 1;
    } else if (queryLength === 1) {
      return;
    } else {
      i = index - 2;
      while (i >= 0 && value.charAt(i) !== SEPARATOR) {
        i--;
      }
      score -= (index - i) + (valueLength - queryLength - index);
    }
    separators = 0;
    i = index - 2;
    while (i >= 0) {
      if (value.charAt(i) === SEPARATOR) {
        separators++;
      }
      i--;
    }
    score -= separators;
  }

  separators = 0;

  i = valueLength - queryLength - index - 1;

  while (i >= 0) {
    if (value.charAt(index + queryLength + i) === SEPARATOR) {
      separators++;
    }
    i--;
  }

  score -= separators * 5;

  return Math.max(1, score);

  };

  function fuzzyMatch() {;

  if (valueLength <= queryLength || value.indexOf(query) >= 0) {
    return;
  }

  if (!(match = fuzzyRegexp.exec(value))) {
    return;
  }

  matchIndex = match.index;

  matchLength = match[0].length;

  score = scoreFuzzyMatch();

  if (match = fuzzyRegexp.exec(value.slice(i = value.lastIndexOf(SEPARATOR) + 1))) {
    matchIndex = i + match.index;
    matchLength = match[0].length;
    return Math.max(score, scoreFuzzyMatch());
  } else {
    return score;
  }

  };

  function scoreFuzzyMatch() {;

  if (matchIndex === 0 || value.charAt(matchIndex - 1) === SEPARATOR) {
    return Math.max(66, 100 - matchLength);
  } else if (matchIndex + matchLength === valueLength) {
    return Math.max(33, 67 - matchLength);
  } else {
    return Math.max(1, 34 - matchLength);
  }

  };

  app.Searcher = (function() {
    var CHUNK_SIZE, DEFAULTS, DOT_REGEXP, ELLIPSIS, EMPTY_STRING, EVENT_REGEXP, PARANTHESES_REGEXP, SEPARATORS_REGEXP, WHITESPACE_REGEXP;

    $.extend(Searcher.prototype, Events);

    CHUNK_SIZE = 20000;

    DEFAULTS = {
      max_results: app.config.max_results,
      fuzzy_min_length: 3
    };

    SEPARATORS_REGEXP = /\:?\ |#|::|->/g;

    PARANTHESES_REGEXP = /\(.*?\)$/;

    EVENT_REGEXP = /\ event$/;

    DOT_REGEXP = /\.+/g;

    WHITESPACE_REGEXP = /\s/g;

    EMPTY_STRING = '';

    ELLIPSIS = '...';

    Searcher.normalizeString = function(string) {
      return string.toLowerCase().replace(ELLIPSIS, EMPTY_STRING).replace(EVENT_REGEXP, EMPTY_STRING).replace(SEPARATORS_REGEXP, SEPARATOR).replace(DOT_REGEXP, SEPARATOR).replace(PARANTHESES_REGEXP, EMPTY_STRING).replace(WHITESPACE_REGEXP, EMPTY_STRING);
    };

    function Searcher(options) {
      if (options == null) {
        options = {};
      }
      this.matchChunks = __bind(this.matchChunks, this);
      this.match = __bind(this.match, this);
      this.options = $.extend({}, DEFAULTS, options);
    }

    Searcher.prototype.find = function(data, attr, q) {
      this.kill();
      this.data = data;
      this.attr = attr;
      this.query = q;
      this.setup();
      if (this.isValid()) {
        this.match();
      } else {
        this.end();
      }
    };

    Searcher.prototype.setup = function() {
      query = this.query = this.constructor.normalizeString(this.query);
      queryLength = query.length;
      this.dataLength = this.data.length;
      this.matchers = [exactMatch];
      this.totalResults = 0;
      this.setupFuzzy();
    };

    Searcher.prototype.setupFuzzy = function() {
      if (queryLength >= this.options.fuzzy_min_length) {
        fuzzyRegexp = this.queryToFuzzyRegexp(query);
        this.matchers.push(fuzzyMatch);
      } else {
        fuzzyRegexp = null;
      }
    };

    Searcher.prototype.isValid = function() {
      return queryLength > 0;
    };

    Searcher.prototype.end = function() {
      if (!this.totalResults) {
        this.triggerResults([]);
      }
      this.trigger('end');
      this.free();
    };

    Searcher.prototype.kill = function() {
      if (this.timeout) {
        clearTimeout(this.timeout);
        this.free();
      }
    };

    Searcher.prototype.free = function() {
      this.data = this.attr = this.dataLength = this.matchers = this.matcher = this.query = this.totalResults = this.scoreMap = this.cursor = this.timeout = null;
    };

    Searcher.prototype.match = function() {
      if (!this.foundEnough() && (this.matcher = this.matchers.shift())) {
        this.setupMatcher();
        this.matchChunks();
      } else {
        this.end();
      }
    };

    Searcher.prototype.setupMatcher = function() {
      this.cursor = 0;
      this.scoreMap = new Array(101);
    };

    Searcher.prototype.matchChunks = function() {
      this.matchChunk();
      if (this.cursor === this.dataLength || this.scoredEnough()) {
        this.delay(this.match);
        this.sendResults();
      } else {
        this.delay(this.matchChunks);
      }
    };

    Searcher.prototype.matchChunk = function() {
      var _i, _ref;
      matcher = this.matcher;
      for (_i = 0, _ref = this.chunkSize(); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
        value = this.data[this.cursor][this.attr];
        valueLength = value.length;
        if (score = matcher()) {
          this.addResult(this.data[this.cursor], score);
        }
        this.cursor++;
      }
    };

    Searcher.prototype.chunkSize = function() {
      if (this.cursor + CHUNK_SIZE > this.dataLength) {
        return this.dataLength % CHUNK_SIZE;
      } else {
        return CHUNK_SIZE;
      }
    };

    Searcher.prototype.scoredEnough = function() {
      var _ref;
      return ((_ref = this.scoreMap[100]) != null ? _ref.length : void 0) >= this.options.max_results;
    };

    Searcher.prototype.foundEnough = function() {
      return this.totalResults >= this.options.max_results;
    };

    Searcher.prototype.addResult = function(object, score) {
      var _base, _name;
      ((_base = this.scoreMap)[_name = Math.round(score)] || (_base[_name] = [])).push(object);
      this.totalResults++;
    };

    Searcher.prototype.getResults = function() {
      var objects, results, _i, _ref;
      results = [];
      _ref = this.scoreMap;
      for (_i = _ref.length - 1; _i >= 0; _i += -1) {
        objects = _ref[_i];
        if (objects) {
          results.push.apply(results, objects);
        }
      }
      return results.slice(0, this.options.max_results);
    };

    Searcher.prototype.sendResults = function() {
      var results;
      results = this.getResults();
      if (results.length) {
        this.triggerResults(results);
      }
    };

    Searcher.prototype.triggerResults = function(results) {
      this.trigger('results', results);
    };

    Searcher.prototype.delay = function(fn) {
      return this.timeout = setTimeout(fn, 1);
    };

    Searcher.prototype.queryToFuzzyRegexp = function(string) {
      var char, chars, _i, _len;
      chars = string.split('');
      for (i = _i = 0, _len = chars.length; _i < _len; i = ++_i) {
        char = chars[i];
        chars[i] = $.escapeRegexp(char);
      }
      return new RegExp(chars.join('.*?'));
    };

    return Searcher;

  })();

  app.SynchronousSearcher = (function(_super) {
    __extends(SynchronousSearcher, _super);

    function SynchronousSearcher() {
      this.match = __bind(this.match, this);
      return SynchronousSearcher.__super__.constructor.apply(this, arguments);
    }

    SynchronousSearcher.prototype.match = function() {
      if (this.matcher) {
        this.allResults || (this.allResults = []);
        this.allResults.push.apply(this.allResults, this.getResults());
      }
      return SynchronousSearcher.__super__.match.apply(this, arguments);
    };

    SynchronousSearcher.prototype.free = function() {
      this.allResults = null;
      return SynchronousSearcher.__super__.free.apply(this, arguments);
    };

    SynchronousSearcher.prototype.end = function() {
      this.sendResults(true);
      return SynchronousSearcher.__super__.end.apply(this, arguments);
    };

    SynchronousSearcher.prototype.sendResults = function(end) {
      var _ref;
      if (end && ((_ref = this.allResults) != null ? _ref.length : void 0)) {
        return this.triggerResults(this.allResults);
      }
    };

    SynchronousSearcher.prototype.delay = function(fn) {
      return fn();
    };

    return SynchronousSearcher;

  })(app.Searcher);

}).call(this);
