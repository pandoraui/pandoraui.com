// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  app.Shortcuts = (function() {
    $.extend(Shortcuts.prototype, Events);

    function Shortcuts() {
      this.onKeypress = __bind(this.onKeypress, this);
      this.onKeydown = __bind(this.onKeydown, this);
      this.isWindows = $.isWindows();
      this.start();
    }

    Shortcuts.prototype.start = function() {
      $.on(document, 'keydown', this.onKeydown);
      $.on(document, 'keypress', this.onKeypress);
    };

    Shortcuts.prototype.stop = function() {
      $.off(document, 'keydown', this.onKeydown);
      $.off(document, 'keypress', this.onKeypress);
    };

    Shortcuts.prototype.onKeydown = function(event) {
      var result;
      result = event.ctrlKey || event.metaKey ? !(event.altKey || event.shiftKey) ? this.handleKeydownSuperEvent(event) : void 0 : event.shiftKey ? !event.altKey ? this.handleKeydownShiftEvent(event) : void 0 : event.altKey ? this.handleKeydownAltEvent(event) : this.handleKeydownEvent(event);
      if (result === false) {
        event.preventDefault();
      }
    };

    Shortcuts.prototype.onKeypress = function(event) {
      var result;
      if (!(event.ctrlKey || event.metaKey)) {
        result = this.handleKeypressEvent(event);
        if (result === false) {
          event.preventDefault();
        }
      }
    };

    Shortcuts.prototype.handleKeydownEvent = function(event) {
      var _ref;
      if (!event.target.form && (65 <= (_ref = event.which) && _ref <= 90)) {
        this.trigger('typing');
        return;
      }
      switch (event.which) {
        case 8:
          if (!event.target.form) {
            return this.trigger('typing');
          }
          break;
        case 13:
          return this.trigger('enter');
        case 27:
          return this.trigger('escape');
        case 32:
          this.trigger('pageDown');
          return false;
        case 33:
          return this.trigger('pageUp');
        case 34:
          return this.trigger('pageDown');
        case 35:
          return this.trigger('end');
        case 36:
          return this.trigger('home');
        case 37:
          if (!event.target.value) {
            return this.trigger('left');
          }
          break;
        case 38:
          this.trigger('up');
          return false;
        case 39:
          if (!event.target.value) {
            return this.trigger('right');
          }
          break;
        case 40:
          this.trigger('down');
          return false;
      }
    };

    Shortcuts.prototype.handleKeydownSuperEvent = function(event) {
      switch (event.which) {
        case 13:
          return this.trigger('superEnter');
        case 37:
          if (!this.isWindows) {
            this.trigger('superLeft');
            return false;
          }
          break;
        case 38:
          this.trigger('home');
          return false;
        case 39:
          if (!this.isWindows) {
            this.trigger('superRight');
            return false;
          }
          break;
        case 40:
          this.trigger('end');
          return false;
      }
    };

    Shortcuts.prototype.handleKeydownShiftEvent = function(event) {
      var _ref;
      if (!event.target.form && (65 <= (_ref = event.which) && _ref <= 90)) {
        this.trigger('typing');
        return;
      }
      if (event.which === 32) {
        this.trigger('pageUp');
        return false;
      }
    };

    Shortcuts.prototype.handleKeydownAltEvent = function(event) {
      switch (event.which) {
        case 9:
          return this.trigger('altRight', event);
        case 37:
          if (this.isWindows) {
            this.trigger('superLeft');
            return false;
          }
          break;
        case 38:
          this.trigger('altUp');
          return false;
        case 39:
          if (this.isWindows) {
            this.trigger('superRight');
            return false;
          }
          break;
        case 40:
          this.trigger('altDown');
          return false;
        case 70:
          return this.trigger('altF', event);
        case 71:
          this.trigger('altG');
          return false;
        case 82:
          this.trigger('altR');
          return false;
      }
    };

    Shortcuts.prototype.handleKeypressEvent = function(event) {
      if (event.which === 63 && !event.target.value) {
        this.trigger('help');
        return false;
      }
    };

    return Shortcuts;

  })();

}).call(this);
