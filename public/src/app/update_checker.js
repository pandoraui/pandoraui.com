// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  app.UpdateChecker = (function() {
    function UpdateChecker() {
      this.onFocus = __bind(this.onFocus, this);
      this.lastCheck = Date.now();
      $.on(window, 'focus', this.checkForUpdate);
      if (app.appCache) {
        app.appCache.on('updateready', this.onUpdateReady);
      }
      this.checkDocs();
    }

    UpdateChecker.prototype.check = function() {
      if (app.appCache) {
        app.appCache.update();
      } else {
        ajax({
          url: $('script[src*="application"]').getAttribute('src'),
          dataType: 'application/javascript',
          error: (function(_this) {
            return function(_, xhr) {
              if (xhr.status === 404) {
                return _this.onUpdateReady();
              }
            };
          })(this)
        });
      }
    };

    UpdateChecker.prototype.onUpdateReady = function() {
      new app.views.Notif('UpdateReady', {
        autoHide: null
      });
    };

    UpdateChecker.prototype.checkDocs = function() {
      if (app.settings.get('autoUpdate')) {
        app.docs.updateInBackground();
      } else {
        app.docs.checkForUpdates((function(_this) {
          return function(i) {
            if (i > 0) {
              return _this.onDocsUpdateReady();
            }
          };
        })(this));
      }
    };

    UpdateChecker.prototype.onDocsUpdateReady = function() {
      new app.views.Notif('UpdateDocs', {
        autoHide: null
      });
    };

    UpdateChecker.prototype.onFocus = function() {
      if (Date.now() - this.lastCheck > 21600e3) {
        this.lastCheck = Date.now();
        this.check();
      }
    };

    return UpdateChecker;

  })();

}).call(this);
