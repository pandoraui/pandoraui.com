// Generated by CoffeeScript 1.8.0
(function() {
  app.Collection = (function() {

    var Collection = Class.extend({
      init: function(objects){
        if (objects == null) {
          objects = [];
        }
        this.reset(objects);
      },

      model: function() {
        return app.models[this.constructor.model];
      },

      reset: function(objects) {
        var object, _i, _len;
        if (objects == null) {
          objects = [];
        }
        this.models = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          object = objects[_i];
          this.add(object);
        }
      },

      add: function(object) {
        var obj, _i, _len, _ref;
        if (object instanceof app.Model) {
          this.models.push(object);
        } else if (object instanceof Array) {
          for (_i = 0, _len = object.length; _i < _len; _i++) {
            obj = object[_i];
            this.add(obj);
          }
        } else if (object instanceof app.Collection) {
          (_ref = this.models).push.apply(_ref, object.all());
        } else {
          this.models.push(new (this.model())(object));
        }
      },

      size: function() {
        return this.models.length;
      },

      isEmpty: function() {
        return this.models.length === 0;
      },

      each: function(fn) {
        var model, _i, _len, _ref;
        _ref = this.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          fn(model);
        }
      },

      all: function() {
        return this.models;
      },

      findBy: function(attr, value) {
        var model, _i, _len, _ref;
        _ref = this.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          if (model[attr] === value) {
            return model;
          }
        }
      },

      findAllBy: function(attr, value) {
        var model, _i, _len, _ref, _results;
        _ref = this.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          if (model[attr] === value) {
            _results.push(model);
          }
        }
        return _results;
      }

    });

    return Collection;

  })();

}).call(this);
