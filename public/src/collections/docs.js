// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  app.collections.Docs = (function(_super) {
    var CONCURRENCY;

    __extends(Docs, _super);

    function Docs() {
      return Docs.__super__.constructor.apply(this, arguments);
    }

    Docs.model = 'Doc';

    Docs.prototype.sort = function(rank) {
      var rank = rank || 'rank';
      console.log("按" + rank + "排序");
      /*
        如果序号相等，超过11个数量后，排序后的结果并不是初始排序的状态
        第一个元素和中间元素相等，则中间元素排序第一
        可参见 test/sort.js 测试示例
        所里这里rank值不能默认取一样的数字 ！！！
      **/
      return this.models.sort(function(a, b) {
        a = a[rank].toString().toLowerCase();
        b = b[rank].toString().toLowerCase();
        if (a < b) {
          return -1;
        } else if (a > b) {
          return 1;
        } else {
          return 0;
        }
      });
    };

    CONCURRENCY = 3;

    Docs.prototype.load = function(onComplete, onError, options) {
      console.log('Docs load')
      var fail, i, next, _i;
      i = 0;
      next = (function(_this) {
        return function() {
          if (i < _this.models.length) {
            console.log(_this.models[i].name)
            _this.models[i].load(next, fail, options);
          } else if (i === _this.models.length + CONCURRENCY - 1) {
            onComplete();
          }
          i++;
        };
      })(this);
      fail = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (onError) {
          onError.apply(null, args);
          onError = null;
        }
        next();
      };
      for (_i = 0; 0 <= CONCURRENCY ? _i < CONCURRENCY : _i > CONCURRENCY; 0 <= CONCURRENCY ? _i++ : _i--) {
        console.log('next');
        next();
      }
    };

    Docs.prototype.clearCache = function() {
      var doc, _i, _len, _ref;
      _ref = this.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        doc = _ref[_i];
        doc.clearCache();
      }
    };

    Docs.prototype.uninstall = function(callback) {
      var i, next;
      i = 0;
      next = (function(_this) {
        return function() {
          if (i < _this.models.length) {
            _this.models[i++].uninstall(next, next);
          } else {
            callback();
          }
        };
      })(this);
      next();
    };

    Docs.prototype.getInstallStatuses = function(callback) {
      app.db.versions(this.models, function(statuses) {
        var key, value;
        if (statuses) {
          for (key in statuses) {
            value = statuses[key];
            statuses[key] = {
              installed: !!value,
              mtime: value
            };
          }
        }
        callback(statuses);
      });
    };

    Docs.prototype.checkForUpdates = function(callback) {
      this.getInstallStatuses((function(_this) {
        return function(statuses) {
          var i, slug, status;
          i = 0;
          if (statuses) {
            for (slug in statuses) {
              status = statuses[slug];
              if (_this.findBy('slug', slug).isOutdated(status)) {
                i += 1;
              }
            }
          }
          callback(i);
        };
      })(this));
    };

    Docs.prototype.updateInBackground = function() {
      this.getInstallStatuses((function(_this) {
        return function(statuses) {
          var doc, slug, status;
          if (!statuses) {
            return;
          }
          for (slug in statuses) {
            status = statuses[slug];
            doc = _this.findBy('slug', slug);
            if (doc.isOutdated(status)) {
              doc.install($.noop, $.noop);
            }
          }
        };
      })(this));
    };

    return Docs;

  })(app.Collection);

}).call(this);
