// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  this.Events = {
    on: function(event, callback) {
      var name, _base, _i, _len, _ref;
      if (event.indexOf(' ') >= 0) {
        _ref = event.split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          this.on(name, callback);
        }
      } else {
        ((_base = (this._callbacks != null ? this._callbacks : this._callbacks = {}))[event] != null ? _base[event] : _base[event] = []).push(callback);
      }
      return this;
    },
    off: function(event, callback) {
      var callbacks, index, name, _i, _len, _ref, _ref1;
      if (event.indexOf(' ') >= 0) {
        _ref = event.split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          this.off(name, callback);
        }
      } else if ((callbacks = (_ref1 = this._callbacks) != null ? _ref1[event] : void 0) && (index = callbacks.indexOf(callback)) >= 0) {
        callbacks.splice(index, 1);
        if (!callbacks.length) {
          delete this._callbacks[event];
        }
      }
      return this;
    },
    trigger: function() {
      var args, callback, callbacks, event, _i, _len, _ref, _ref1;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (callbacks = (_ref = this._callbacks) != null ? _ref[event] : void 0) {
        _ref1 = callbacks.slice(0);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          callback = _ref1[_i];
          if (typeof callback === "function") {
            callback.apply(null, args);
          }
        }
      }
      if (event !== 'all') {
        this.trigger.apply(this, ['all', event].concat(__slice.call(args)));
      }
      return this;
    },
    removeEvent: function(event) {
      var name, _i, _len, _ref;
      if (this._callbacks != null) {
        _ref = event.split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          delete this._callbacks[name];
        }
      }
      return this;
    }
  };

}).call(this);
