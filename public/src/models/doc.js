// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.models.Doc = (function(_super) {
    //__extends(Doc, _super);

    //app.Model

    var Doc = Class.extend({
      init: function(){
        Doc.__super__.constructor.apply(this, arguments);
        this.reset(this);
        this.text = this.name.toLowerCase();
      },

      reset: function(data) {
        this.resetEntries(data.entries);
        this.resetTypes(data.types);
      },

      resetEntries: function(entries) {
        this.entries = new app.collections.Entries(entries);
        this.entries.each((function(_this) {
          return function(entry) {
            return entry.doc = _this;
          };
        })(this));
      },

      resetTypes: function(types) {
        this.types = new app.collections.Types(types);
        this.types.each((function(_this) {
          return function(type) {
            return type.doc = _this;
          };
        })(this));
      },

      fullPath: function(path) {
        if (path == null) {
          path = '';
        }
        if (path[0] !== '/') {
          path = "/" + path;
        }
        return "/" + this.slug + path;
      },

      fileUrl: function(path) {
        return "" + app.config.docs_host + (this.fullPath(path));
      },

      dbUrl: function() {
        return "" + app.config.docs_host + "/" + this.db_path + "?" + this.mtime;
      },

      indexUrl: function() {
        var url = "" + (app.indexHost()) + "/" + this.index_path + "?" + this.mtime;
        console.log('ajaxUrl:'+url);
        return url;
      },

      toEntry: function() {
        return new app.models.Entry({
          doc: this,
          name: this.name,
          path: 'index'
        });
      },

      findEntryByPathAndHash: function(path, hash) {
        var entry;
        if (hash && (entry = this.entries.findBy('path', "" + path + "#" + hash))) {
          return entry;
        } else if (path === 'index') {
          return this.toEntry();
        } else {
          return this.entries.findBy('path', path);
        }
      },

      load: function(onSuccess, onError, options) {
        console.log('Doc load')
        var callback;
        if (options == null) {
          options = {};
        }
        if (options.readCache && this._loadFromCache(onSuccess)) {
          return;
        }
        callback = (function(_this) {
          return function(data) {
            _this.reset(data);
            onSuccess();
            if (options.writeCache) {
              _this._setCache(data);
            }
          };
        })(this);
        return ajax({
          url: this.indexUrl(),
          success: callback,
          error: onError
        });
      },

      clearCache: function() {
        app.store.del(this.slug);
      },

      _loadFromCache: function(onSuccess) {
        var callback, data;
        if (!(data = this._getCache())) {
          return;
        }
        callback = (function(_this) {
          return function() {
            _this.reset(data);
            onSuccess();
          };
        })(this);
        setTimeout(callback, 0);
        return true;
      },

      _getCache: function() {
        var data;
        if (!(data = app.store.get(this.slug))) {
          return;
        }
        if (data[0] === this.mtime) {
          return data[1];
        } else {
          this.clearCache();
        }
      },

      _setCache: function(data) {
        app.store.set(this.slug, [this.mtime, data]);
      },

      install: function(onSuccess, onError) {
        var error, success;
        if (this.installing) {
          return;
        }
        this.installing = true;
        error = (function(_this) {
          return function() {
            _this.installing = null;
            onError();
          };
        })(this);
        success = (function(_this) {
          return function(data) {
            _this.installing = null;
            app.db.store(_this, data, onSuccess, error);
          };
        })(this);
        ajax({
          url: this.dbUrl(),
          success: success,
          error: error,
          timeout: 3600
        });
      },

      uninstall: function(onSuccess, onError) {
        var error, success;
        if (this.installing) {
          return;
        }
        this.installing = true;
        success = (function(_this) {
          return function() {
            _this.installing = null;
            onSuccess();
          };
        })(this);
        error = (function(_this) {
          return function() {
            _this.installing = null;
            onError();
          };
        })(this);
        app.db.unstore(this, success, error);
      },

      getInstallStatus: function(callback) {
        app.db.version(this, function(value) {
          return callback({
            installed: !!value,
            mtime: value
          });
        });
      },

      isOutdated: function(status) {
        return status.installed && this.mtime !== status.mtime;
      }
    });

    //debugger;

    __extends(Doc, _super);

    return Doc;

  })(app.Model);

}).call(this);
