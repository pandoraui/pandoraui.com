// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.Content = (function(_super) {
    __extends(Content, _super);

    function Content() {
      this.onAltF = __bind(this.onAltF, this);
      this.onClick = __bind(this.onClick, this);
      this.afterRoute = __bind(this.afterRoute, this);
      this.beforeRoute = __bind(this.beforeRoute, this);
      this.onEntryLoaded = __bind(this.onEntryLoaded, this);
      this.onEntryLoading = __bind(this.onEntryLoading, this);
      this.onBootError = __bind(this.onBootError, this);
      this.onReady = __bind(this.onReady, this);
      this.scrollPageDown = __bind(this.scrollPageDown, this);
      this.scrollPageUp = __bind(this.scrollPageUp, this);
      this.scrollStepDown = __bind(this.scrollStepDown, this);
      this.scrollStepUp = __bind(this.scrollStepUp, this);
      this.scrollToBottom = __bind(this.scrollToBottom, this);
      this.scrollToTop = __bind(this.scrollToTop, this);
      return Content.__super__.constructor.apply(this, arguments);
    }

    Content.el = '._content';

    Content.loadingClass = '_content-loading';

    Content.events = {
      click: 'onClick'
    };

    Content.shortcuts = {
      altUp: 'scrollStepUp',
      altDown: 'scrollStepDown',
      pageUp: 'scrollPageUp',
      pageDown: 'scrollPageDown',
      home: 'scrollToTop',
      end: 'scrollToBottom',
      altF: 'onAltF'
    };

    Content.routes = {
      before: 'beforeRoute',
      after: 'afterRoute'
    };

    Content.prototype.init = function() {
      this.scrollEl = app.isMobile() ? document.body : this.el;
      this.scrollMap = {};
      this.scrollStack = [];
      this.rootPage = new app.views.RootPage;
      this.staticPage = new app.views.StaticPage;
      this.offlinePage = new app.views.OfflinePage;
      this.typePage = new app.views.TypePage;
      this.entryPage = new app.views.EntryPage;
      this.entryPage.on('loading', this.onEntryLoading).on('loaded', this.onEntryLoaded);
      app.on('ready', this.onReady).on('bootError', this.onBootError);
    };

    Content.prototype.show = function(view) {
      var _ref;
      this.hideLoading();
      if (view !== this.view) {
        if ((_ref = this.view) != null) {
          _ref.deactivate();
        }
        this.html(this.view = view);
        this.view.activate();
      }
    };

    Content.prototype.showLoading = function() {
      this.addClass(this.constructor.loadingClass);
    };

    Content.prototype.hideLoading = function() {
      this.removeClass(this.constructor.loadingClass);
    };

    Content.prototype.scrollTo = function(value) {
      this.scrollEl.scrollTop = value || 0;
    };

    Content.prototype.scrollBy = function(n) {
      this.scrollEl.scrollTop += n;
    };

    Content.prototype.scrollToTop = function() {
      this.scrollTo(0);
    };

    Content.prototype.scrollToBottom = function() {
      this.scrollTo(this.scrollEl.scrollHeight);
    };

    Content.prototype.scrollStepUp = function() {
      this.scrollBy(-50);
    };

    Content.prototype.scrollStepDown = function() {
      this.scrollBy(50);
    };

    Content.prototype.scrollPageUp = function() {
      this.scrollBy(80 - this.scrollEl.clientHeight);
    };

    Content.prototype.scrollPageDown = function() {
      this.scrollBy(this.scrollEl.clientHeight - 80);
    };

    Content.prototype.scrollToTarget = function() {
      var el;
      if (this.routeCtx.hash && (el = this.findTargetByHash(this.routeCtx.hash))) {
        $.scrollToWithImageLock(el, this.scrollEl, 'top', {
          margin: 20 + (this.scrollEl === this.el ? 0 : $.offset(this.el).top)
        });
        $.highlight(el, {
          className: '_highlight'
        });
      } else {
        this.scrollTo(this.scrollMap[this.routeCtx.state.id]);
      }
    };

    Content.prototype.onReady = function() {
      this.hideLoading();
    };

    Content.prototype.onBootError = function() {
      this.hideLoading();
      this.html(this.tmpl('bootError'));
    };

    Content.prototype.onEntryLoading = function() {
      this.showLoading();
    };

    Content.prototype.onEntryLoaded = function() {
      this.hideLoading();
      this.scrollToTarget();
    };

    Content.prototype.beforeRoute = function(context) {
      this.cacheScrollPosition();
      this.routeCtx = context;
      this.delay(this.scrollToTarget);
    };

    Content.prototype.cacheScrollPosition = function() {
      if (!this.routeCtx || this.routeCtx.hash) {
        return;
      }
      if (this.scrollMap[this.routeCtx.state.id] == null) {
        this.scrollStack.push(this.routeCtx.state.id);
        while (this.scrollStack.length > app.config.history_cache_size) {
          delete this.scrollMap[this.scrollStack.shift()];
        }
      }
      this.scrollMap[this.routeCtx.state.id] = this.scrollEl.scrollTop;
    };

    Content.prototype.afterRoute = function(route, context) {
      var _base;
      switch (route) {
        case 'root':
          this.show(this.rootPage);
          break;
        case 'entry':
          this.show(this.entryPage);
          break;
        case 'type':
          this.show(this.typePage);
          break;
        case 'offline':
          this.show(this.offlinePage);
          break;
        default:
          this.show(this.staticPage);
      }
      this.view.onRoute(context);
      app.document.setTitle(typeof (_base = this.view).getTitle === "function" ? _base.getTitle() : void 0);
    };

    Content.prototype.onClick = function(event) {
      var link;
      link = $.closestLink(event.target, this.el);
      if (link && this.isExternalUrl(link.getAttribute('href'))) {
        $.stopEvent(event);
        $.popup(link);
      }
    };

    Content.prototype.onAltF = function(event) {
      var _ref;
      if (!(document.activeElement && $.hasChild(this.el, document.activeElement))) {
        if ((_ref = this.findByTag('a')) != null) {
          _ref.focus();
        }
        return $.stopEvent(event);
      }
    };

    Content.prototype.findTargetByHash = function(hash) {
      var el;
      el = (function() {
        try {
          return $.id(decodeURIComponent(hash));
        } catch (_error) {

        }
      })();
      el || (el = (function() {
        try {
          return $.id(hash);
        } catch (_error) {

        }
      })());
      return el;
    };

    Content.prototype.isExternalUrl = function(url) {
      var _ref;
      return (_ref = url != null ? url.slice(0, 6) : void 0) === 'http:/' || _ref === 'https:';
    };

    return Content;

  })(app.View);

}).call(this);
