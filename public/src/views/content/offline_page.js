// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.OfflinePage = (function(_super) {
    __extends(OfflinePage, _super);

    function OfflinePage() {
      this.onClick = __bind(this.onClick, this);
      return OfflinePage.__super__.constructor.apply(this, arguments);
    }

    OfflinePage.className = '_static';

    OfflinePage.events = {
      click: 'onClick',
      change: 'onChange'
    };

    OfflinePage.prototype.deactivate = function() {
      if (OfflinePage.__super__.deactivate.apply(this, arguments)) {
        this.empty();
      }
    };

    OfflinePage.prototype.render = function() {
      app.docs.getInstallStatuses((function(_this) {
        return function(statuses) {
          var doc, html, _i, _len, _ref;
          if (!_this.activated) {
            return;
          }
          if (statuses === false) {
            _this.html(_this.tmpl('offlineError'));
          } else {
            html = '';
            _ref = app.docs.all();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              doc = _ref[_i];
              html += _this.renderDoc(doc, statuses[doc.slug]);
            }
            _this.html(_this.tmpl('offlinePage', html));
            _this.refreshLinks();
          }
        };
      })(this));
    };

    OfflinePage.prototype.renderDoc = function(doc, status) {
      return app.templates.render('offlineDoc', doc, status);
    };

    OfflinePage.prototype.getTitle = function() {
      return 'Offline';
    };

    OfflinePage.prototype.refreshLinks = function() {
      var action, _i, _len, _ref;
      _ref = ['install', 'update', 'uninstall'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        this.find("a[data-action-all='" + action + "']").classList[this.find("a[data-action='" + action + "']") ? 'add' : 'remove']('_show');
      }
    };

    OfflinePage.prototype.docByEl = function(el) {
      var slug;
      while (!(slug = el.getAttribute('data-slug'))) {
        el = el.parentNode;
      }
      return app.docs.findBy('slug', slug);
    };

    OfflinePage.prototype.docEl = function(doc) {
      return this.find("[data-slug='" + doc.slug + "']");
    };

    OfflinePage.prototype.onRoute = function(route) {
      if (app.isSingleDoc()) {
        window.location = "/#/" + route.path;
      } else {
        this.render();
      }
    };

    OfflinePage.prototype.onClick = function(event) {
      var action, doc, el, link, _i, _len, _ref;
      if (!(link = $.closestLink(event.target))) {
        return;
      }
      if (action = link.getAttribute('data-action')) {
        $.stopEvent(event);
        doc = this.docByEl(link);
        if (action === 'update') {
          action = 'install';
        }
        doc[action](this.onInstallSuccess.bind(this, doc), this.onInstallError.bind(this, doc));
        link.parentNode.innerHTML = "" + (link.textContent.replace(/e$/, '')) + "ingâ€¦";
      } else if (action = link.getAttribute('data-action-all')) {
        $.stopEvent(event);
        _ref = this.findAll("a[data-action='" + action + "']");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          el.click();
        }
      }
    };

    OfflinePage.prototype.onInstallSuccess = function(doc) {
      if (!this.activated) {
        return;
      }
      doc.getInstallStatus((function(_this) {
        return function(status) {
          var el;
          if (!_this.activated) {
            return;
          }
          if (el = _this.docEl(doc)) {
            el.outerHTML = _this.renderDoc(doc, status);
            $.highlight(el, {
              className: '_highlight'
            });
            _this.refreshLinks();
          }
        };
      })(this));
    };

    OfflinePage.prototype.onInstallError = function(doc) {
      var el;
      if (!this.activated) {
        return;
      }
      if (el = this.docEl(doc)) {
        el.lastElementChild.textContent = 'Error';
      }
    };

    OfflinePage.prototype.onChange = function(event) {
      if (event.target.name === 'autoUpdate') {
        app.settings.set('autoUpdate', !!event.target.checked);
      }
    };

    return OfflinePage;

  })(app.View);

}).call(this);
