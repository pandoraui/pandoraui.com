// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  app.views.Path = (function(_super) {
    __extends(Path, _super);

    function Path() {
      this.afterRoute = __bind(this.afterRoute, this);
      this.onClick = __bind(this.onClick, this);
      return Path.__super__.constructor.apply(this, arguments);
    }

    Path.className = '_path';

    Path.events = {
      click: 'onClick'
    };

    Path.routes = {
      after: 'afterRoute'
    };

    Path.prototype.render = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.show();
      return this.html(this.tmpl.apply(this, ['path'].concat(__slice.call(args))));
    };

    Path.prototype.show = function() {
      if (!this.el.parentNode) {
        return $.prepend($('._app'), this.el);
      }
    };

    Path.prototype.hide = function() {
      if (this.el.parentNode) {
        return $.remove(this.el);
      }
    };

    Path.prototype.onClick = function(event) {
      var link;
      if (link = $.closestLink(event.target, this.el)) {
        return this.clicked = true;
      }
    };

    Path.prototype.afterRoute = function(route, context) {
      if (context.type) {
        this.render(context.doc, context.type);
      } else if (context.entry) {
        if (context.entry.isIndex()) {
          this.render(context.doc);
        } else {
          this.render(context.doc, context.entry.getType(), context.entry);
        }
      } else {
        this.hide();
      }
      if (this.clicked) {
        this.clicked = null;
        return app.document.sidebar.reset();
      }
    };

    return Path;

  })(app.View);

}).call(this);
