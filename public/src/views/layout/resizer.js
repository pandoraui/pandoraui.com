// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.Resizer = (function(_super) {
    var MAX, MIN;

    __extends(Resizer, _super);

    function Resizer() {
      this.onDragEnd = __bind(this.onDragEnd, this);
      this.onDrag = __bind(this.onDrag, this);
      this.onDragStart = __bind(this.onDragStart, this);
      return Resizer.__super__.constructor.apply(this, arguments);
    }

    Resizer.className = '_resizer';

    Resizer.events = {
      dragstart: 'onDragStart',
      dragend: 'onDragEnd',
      drag: 'onDrag'
    };

    Resizer.isSupported = function() {
      return 'ondragstart' in document.createElement('div') && !app.isMobile();
    };

    Resizer.prototype.init = function() {
      this.el.setAttribute('draggable', 'true');
      this.appendTo($('._app'));
      this.style = $('style[data-resizer]');
      this.size = this.style.getAttribute('data-size');
    };

    MIN = 250;

    MAX = 600;

    Resizer.prototype.resize = function(value, save) {
      var newSize, _ref;
      if (!(value > 0)) {
        return;
      }
      value = Math.min(Math.max(Math.round(value), MIN), MAX);
      newSize = "" + value + "px";
      this.style.innerHTML = this.style.innerHTML.replace(new RegExp(this.size, 'g'), newSize);
      this.size = newSize;
      if (save) {
        app.settings.setSize(value);
        if ((_ref = app.appCache) != null) {
          _ref.updateInBackground();
        }
      }
    };

    Resizer.prototype.onDragStart = function(event) {
      this.style.removeAttribute('disabled');
      event.dataTransfer.effectAllowed = 'link';
      event.dataTransfer.setData('Text', '');
    };

    Resizer.prototype.onDrag = function(event) {
      if (this.lastDrag && this.lastDrag > Date.now() - 50) {
        return;
      }
      this.lastDrag = Date.now();
      this.resize(event.clientX, false);
    };

    Resizer.prototype.onDragEnd = function(event) {
      this.resize(event.screenX - window.screenX, true);
    };

    return Resizer;

  })(app.View);

}).call(this);
