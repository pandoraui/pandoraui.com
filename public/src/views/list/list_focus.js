// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.ListFocus = (function(_super) {
    __extends(ListFocus, _super);

    ListFocus.activeClass = 'focus';

    ListFocus.events = {
      click: 'onClick'
    };

    ListFocus.shortcuts = {
      up: 'onUp',
      down: 'onDown',
      left: 'onLeft',
      enter: 'onEnter',
      superEnter: 'onSuperEnter',
      escape: 'blur'
    };

    function ListFocus(el) {
      this.el = el;
      this.onClick = __bind(this.onClick, this);
      this.onSuperEnter = __bind(this.onSuperEnter, this);
      this.onEnter = __bind(this.onEnter, this);
      this.onLeft = __bind(this.onLeft, this);
      this.onUp = __bind(this.onUp, this);
      this.onDown = __bind(this.onDown, this);
      this.blur = __bind(this.blur, this);
      ListFocus.__super__.constructor.apply(this, arguments);
    }

    ListFocus.prototype.focus = function(el) {
      if (el && !el.classList.contains(this.constructor.activeClass)) {
        this.blur();
        el.classList.add(this.constructor.activeClass);
        $.trigger(el, 'focus');
      }
    };

    ListFocus.prototype.blur = function() {
      var cursor;
      if (cursor = this.getCursor()) {
        cursor.classList.remove(this.constructor.activeClass);
        $.trigger(cursor, 'blur');
      }
    };

    ListFocus.prototype.getCursor = function() {
      return this.findByClass(this.constructor.activeClass) || this.findByClass(app.views.ListSelect.activeClass);
    };

    ListFocus.prototype.findNext = function(cursor) {
      var next;
      if (next = cursor.nextSibling) {
        if (next.tagName === 'A') {
          return next;
        } else if (next.tagName === 'SPAN') {
          $.click(next);
          return this.findNext(cursor);
        } else if (next.tagName === 'DIV') {
          return this.findFirst(next) || this.findNext(next);
        } else if (next.tagName === 'H6') {
          return this.findNext(next);
        }
      } else if (cursor.parentElement !== this.el) {
        return this.findNext(cursor.parentElement);
      }
    };

    ListFocus.prototype.findFirst = function(cursor) {
      var first;
      if (!(first = cursor.firstChild)) {
        return;
      }
      if (first.tagName === 'A') {
        return first;
      } else if (first.tagName === 'SPAN') {
        $.click(first);
        return this.findFirst(cursor);
      }
    };

    ListFocus.prototype.findPrev = function(cursor) {
      var prev;
      if (prev = cursor.previousSibling) {
        if (prev.tagName === 'A') {
          return prev;
        } else if (prev.tagName === 'SPAN') {
          $.click(prev);
          return this.findPrev(cursor);
        } else if (prev.tagName === 'DIV') {
          return this.findLast(prev) || this.findPrev(prev);
        } else if (prev.tagName === 'H6') {
          return this.findPrev(prev);
        }
      } else if (cursor.parentElement !== this.el) {
        return this.findPrev(cursor.parentElement);
      }
    };

    ListFocus.prototype.findLast = function(cursor) {
      var last;
      if (!(last = cursor.lastChild)) {
        return;
      }
      if (last.tagName === 'A') {
        return last;
      } else if (last.tagName === 'SPAN' || last.tagName === 'H6') {
        return this.findPrev(last);
      } else if (last.tagName === 'DIV') {
        return this.findLast(last);
      }
    };

    ListFocus.prototype.onDown = function() {
      var cursor;
      if (cursor = this.getCursor()) {
        this.focus(this.findNext(cursor));
      } else {
        this.focus(this.findByTag('a'));
      }
    };

    ListFocus.prototype.onUp = function() {
      var cursor;
      if (cursor = this.getCursor()) {
        this.focus(this.findPrev(cursor));
      } else {
        this.focus(this.findLastByTag('a'));
      }
    };

    ListFocus.prototype.onLeft = function() {
      var cursor;
      cursor = this.getCursor();
      if (cursor && !cursor.classList.contains(app.views.ListFold.activeClass) && cursor.parentElement !== this.el) {
        this.focus(cursor.parentElement.previousSibling);
      }
    };

    ListFocus.prototype.onEnter = function() {
      var cursor;
      if (cursor = this.getCursor()) {
        $.click(cursor);
      }
    };

    ListFocus.prototype.onSuperEnter = function() {
      var cursor;
      if (cursor = this.getCursor()) {
        $.popup(cursor);
      }
    };

    ListFocus.prototype.onClick = function(event) {
      if (event.target.tagName === 'A') {
        this.focus(event.target);
      }
    };

    return ListFocus;

  })(app.View);

}).call(this);
