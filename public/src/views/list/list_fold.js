// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.ListFold = (function(_super) {
    __extends(ListFold, _super);

    ListFold.targetClass = '_list-dir';

    ListFold.handleClass = '_list-arrow';

    ListFold.activeClass = 'open';

    ListFold.events = {
      click: 'onClick'
    };

    ListFold.shortcuts = {
      left: 'onLeft',
      right: 'onRight'
    };

    function ListFold(el) {
      this.el = el;
      this.onClick = __bind(this.onClick, this);
      this.onRight = __bind(this.onRight, this);
      this.onLeft = __bind(this.onLeft, this);
      ListFold.__super__.constructor.apply(this, arguments);
    }

    ListFold.prototype.open = function(el) {
      if (el && !el.classList.contains(this.constructor.activeClass)) {
        el.classList.add(this.constructor.activeClass);
        $.trigger(el, 'open');
      }
    };

    ListFold.prototype.close = function(el) {
      if (el && el.classList.contains(this.constructor.activeClass)) {
        el.classList.remove(this.constructor.activeClass);
        $.trigger(el, 'close');
      }
    };

    ListFold.prototype.toggle = function(el) {
      if (el.classList.contains(this.constructor.activeClass)) {
        this.close(el);
      } else {
        this.open(el);
      }
    };

    ListFold.prototype.reset = function() {
      var el;
      while (el = this.findByClass(this.constructor.activeClass)) {
        this.close(el);
      }
    };

    ListFold.prototype.getCursor = function() {
      return this.findByClass(app.views.ListFocus.activeClass) || this.findByClass(app.views.ListSelect.activeClass);
    };

    ListFold.prototype.onLeft = function() {
      var cursor;
      cursor = this.getCursor();
      if (cursor != null ? cursor.classList.contains(this.constructor.activeClass) : void 0) {
        this.close(cursor);
      }
    };

    ListFold.prototype.onRight = function() {
      var cursor;
      cursor = this.getCursor();
      if (cursor != null ? cursor.classList.contains(this.constructor.targetClass) : void 0) {
        this.open(cursor);
      }
    };

    ListFold.prototype.onClick = function(event) {
      var el;
      if (!event.pageY) {
        return;
      }
      el = event.target;
      if (el.classList.contains(this.constructor.handleClass)) {
        $.stopEvent(event);
        this.toggle(el.parentElement);
      } else if (el.classList.contains(this.constructor.targetClass)) {
        this.open(el);
      }
    };

    return ListFold;

  })(app.View);

}).call(this);
