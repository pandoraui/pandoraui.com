// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.SearchScope = (function(_super) {
    var SEARCH_PARAM;

    __extends(SearchScope, _super);

    SEARCH_PARAM = app.config.search_param;

    SearchScope.elements = {
      input: '._search-input',
      tag: '._search-tag'
    };

    SearchScope.events = {
      keydown: 'onKeydown'
    };

    SearchScope.shortcuts = {
      escape: 'reset'
    };

    function SearchScope(el) {
      this.el = el;
      this.onKeydown = __bind(this.onKeydown, this);
      this.reset = __bind(this.reset, this);
      this.onResults = __bind(this.onResults, this);
      SearchScope.__super__.constructor.apply(this, arguments);
    }

    SearchScope.prototype.init = function() {
      this.placeholder = this.input.getAttribute('placeholder');
      this.searcher = new app.SynchronousSearcher({
        fuzzy_min_length: 2,
        max_results: 1
      });
      this.searcher.on('results', this.onResults);
    };

    SearchScope.prototype.getScope = function() {
      return this.doc || app;
    };

    SearchScope.prototype.search = function(value) {
      if (!this.doc) {
        this.searcher.find(app.docs.all(), 'text', value);
      }
    };

    SearchScope.prototype.searchUrl = function() {
      var value;
      if (value = this.extractHashValue()) {
        this.search(value);
      }
    };

    SearchScope.prototype.onResults = function(results) {
      if (results.length) {
        this.selectDoc(results[0]);
      }
    };

    SearchScope.prototype.selectDoc = function(doc) {
      this.doc = doc;
      this.tag.textContent = doc.name;
      this.tag.style.display = 'block';
      this.input.removeAttribute('placeholder');
      this.input.value = this.input.value.slice(this.input.selectionStart);
      this.input.style.paddingLeft = this.tag.offsetWidth + 10 + 'px';
      return $.trigger(this.input, 'input');
    };

    SearchScope.prototype.reset = function() {
      this.doc = null;
      this.tag.textContent = '';
      this.tag.style.display = 'none';
      this.input.setAttribute('placeholder', this.placeholder);
      return this.input.style.paddingLeft = '';
    };

    SearchScope.prototype.onKeydown = function(event) {
      if (event.ctrlKey || event.metaKey || event.altKey || event.shiftKey) {
        return;
      }
      if (event.which === 8) {
        if (this.doc && !this.input.value) {
          $.stopEvent(event);
          this.reset();
        }
      } else if (event.which === 9 || event.which === 32 && (app.isMobile() || $.isTouchScreen())) {
        $.stopEvent(event);
        this.search(this.input.value.slice(0, this.input.selectionStart));
      }
    };

    SearchScope.prototype.extractHashValue = function() {
      var newHash, value;
      if (value = this.getHashValue()) {
        newHash = $.urlDecode(location.hash).replace("#" + SEARCH_PARAM + "=" + value + " ", "#" + SEARCH_PARAM + "=");
        app.router.replaceHash(newHash);
        return value;
      }
    };

    SearchScope.prototype.getHashValue = function() {
      var _ref;
      try {
        return (_ref = (new RegExp("^#" + SEARCH_PARAM + "=(.+?) .")).exec($.urlDecode(location.hash))) != null ? _ref[1] : void 0;
      } catch (_error) {

      }
    };

    return SearchScope;

  })(app.View);

}).call(this);
