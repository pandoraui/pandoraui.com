// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.DocList = (function(_super) {
    __extends(DocList, _super);

    function DocList() {
      this.afterRoute = __bind(this.afterRoute, this);
      this.onEnable = __bind(this.onEnable, this);
      this.onClick = __bind(this.onClick, this);
      this.onClose = __bind(this.onClose, this);
      this.onOpen = __bind(this.onOpen, this);
      this.render = __bind(this.render, this);
      return DocList.__super__.constructor.apply(this, arguments);
    }

    DocList.className = '_list';

    DocList.events = {
      open: 'onOpen',
      close: 'onClose',
      click: 'onClick'
    };

    DocList.routes = {
      after: 'afterRoute'
    };

    DocList.elements = {
      disabledTitle: '._list-title',
      disabledList: '._disabled-list'
    };

    DocList.prototype.init = function() {
      this.lists = {};
      this.addSubview(this.listSelect = new app.views.ListSelect(this.el));
      if (!app.isMobile()) {
        this.addSubview(this.listFocus = new app.views.ListFocus(this.el));
      }
      this.addSubview(this.listFold = new app.views.ListFold(this.el));
      app.on('ready', this.render);
    };

    DocList.prototype.activate = function() {
      var list, slug, _ref;
      if (DocList.__super__.activate.apply(this, arguments)) {
        _ref = this.lists;
        for (slug in _ref) {
          list = _ref[slug];
          list.activate();
        }
        this.listSelect.selectCurrent();
      }
    };

    DocList.prototype.deactivate = function() {
      var list, slug, _ref;
      if (DocList.__super__.deactivate.apply(this, arguments)) {
        _ref = this.lists;
        for (slug in _ref) {
          list = _ref[slug];
          list.deactivate();
        }
      }
    };

    DocList.prototype.render = function() {
      console.log('sidebarDoc render');
      this.html(this.tmpl('sidebarDoc', app.docs.all()));
      if (!(app.isSingleDoc() || app.disabledDocs.size() === 0)) {
        this.renderDisabled();
      }
    };

    DocList.prototype.renderDisabled = function() {
      this.append(this.tmpl('sidebarDisabled', {
        count: app.disabledDocs.size()
      }));
      this.refreshElements();
      this.renderDisabledList();
    };

    DocList.prototype.renderDisabledList = function() {
      var hidden;
      if ((hidden = app.settings.get('hideDisabled')) === true) {
        this.removeDisabledList();
      } else {
        if (hidden !== false) {
          app.settings.set('hideDisabled', false);
        }
        this.appendDisabledList();
      }
    };

    DocList.prototype.appendDisabledList = function() {
      this.append(this.tmpl('sidebarDisabledList', {
        docs: app.disabledDocs.all()
      }));
      this.disabledTitle.classList.add('open-title');
      this.refreshElements();
    };

    DocList.prototype.removeDisabledList = function() {
      if (this.disabledList) {
        $.remove(this.disabledList);
      }
      this.disabledTitle.classList.remove('open-title');
      this.refreshElements();
    };

    DocList.prototype.reset = function(options) {
      var _ref;
      if (options == null) {
        options = {};
      }
      this.listSelect.deselect();
      if ((_ref = this.listFocus) != null) {
        _ref.blur();
      }
      this.listFold.reset();
      if (options.revealCurrent) {
        this.revealCurrent();
      }
    };

    DocList.prototype.onOpen = function(event) {
      var doc;
      $.stopEvent(event);
      doc = app.docs.findBy('slug', event.target.getAttribute('data-slug'));
      if (doc && !this.lists[doc.slug]) {
        this.lists[doc.slug] = doc.types.isEmpty() ? new app.views.EntryList(doc.entries.all()) : new app.views.TypeList(doc);
        $.after(event.target, this.lists[doc.slug].el);
      }
    };

    DocList.prototype.onClose = function(event) {
      var doc;
      $.stopEvent(event);
      doc = app.docs.findBy('slug', event.target.getAttribute('data-slug'));
      if (doc && this.lists[doc.slug]) {
        this.lists[doc.slug].detach();
        delete this.lists[doc.slug];
      }
    };

    DocList.prototype.select = function(model) {
      this.listSelect.selectByHref(model != null ? model.fullPath() : void 0);
    };

    DocList.prototype.reveal = function(model) {
      this.openDoc(model.doc);
      if (model.type) {
        this.openType(model.getType());
      }
      this.paginateTo(model);
      this.scrollTo(model);
    };

    DocList.prototype.revealCurrent = function() {
      var model;
      if (model = app.router.context.type || app.router.context.entry) {
        this.reveal(model);
        this.select(model);
      }
    };

    DocList.prototype.openDoc = function(doc) {
      this.listFold.open(this.find("[data-slug='" + doc.slug + "']"));
    };

    DocList.prototype.openType = function(type) {
      this.listFold.open(this.lists[type.doc.slug].find("[data-slug='" + type.slug + "']"));
    };

    DocList.prototype.paginateTo = function(model) {
      var _ref;
      if ((_ref = this.lists[model.doc.slug]) != null) {
        _ref.paginateTo(model);
      }
    };

    DocList.prototype.scrollTo = function(model) {
      $.scrollTo(this.find("a[href='" + (model.fullPath()) + "']"), null, 'top', {
        margin: 0
      });
    };

    DocList.prototype.toggleDisabled = function() {
      if (this.disabledTitle.classList.contains('open-title')) {
        this.removeDisabledList();
        app.settings.set('hideDisabled', true);
      } else {
        this.appendDisabledList();
        app.settings.set('hideDisabled', false);
      }
    };

    DocList.prototype.onClick = function(event) {
      var doc, slug;
      if (this.disabledTitle && $.hasChild(this.disabledTitle, event.target)) {
        $.stopEvent(event);
        this.toggleDisabled();
      } else if (slug = event.target.getAttribute('data-enable')) {
        $.stopEvent(event);
        doc = app.disabledDocs.findBy('slug', slug);
        app.enableDoc(doc, this.onEnable, this.onEnable);
      }
    };

    DocList.prototype.onEnable = function() {
      this.reset();
      this.render();
    };

    DocList.prototype.afterRoute = function(route, context) {
      if (context.init) {
        this.reset({
          revealCurrent: true
        });
      } else {
        this.select(context.type || context.entry);
      }
    };

    return DocList;

  })(app.View);

}).call(this);
