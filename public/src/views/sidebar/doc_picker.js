// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.DocPicker = (function(_super) {
    __extends(DocPicker, _super);

    function DocPicker() {
      this.onAppCacheProgress = __bind(this.onAppCacheProgress, this);
      this.onEnter = __bind(this.onEnter, this);
      this.onClick = __bind(this.onClick, this);
      return DocPicker.__super__.constructor.apply(this, arguments);
    }

    DocPicker.className = '_list';

    DocPicker.elements = {
      saveLink: '._sidebar-footer-save'
    };

    DocPicker.events = {
      click: 'onClick'
    };

    DocPicker.shortcuts = {
      enter: 'onEnter'
    };

    DocPicker.prototype.activate = function() {
      var _ref;
      if (DocPicker.__super__.activate.apply(this, arguments)) {
        this.render();
        this.findByTag('input').focus();
        if ((_ref = app.appCache) != null) {
          _ref.on('progress', this.onAppCacheProgress);
        }
        $.on(this.el, 'focus', this.onFocus, true);
      }
    };

    DocPicker.prototype.deactivate = function() {
      var _ref;
      if (DocPicker.__super__.deactivate.apply(this, arguments)) {
        this.empty();
        if ((_ref = app.appCache) != null) {
          _ref.off('progress', this.onAppCacheProgress);
        }
        $.off(this.el, 'focus', this.onFocus, true);
      }
    };

    DocPicker.prototype.render = function() {
      this.html(this.tmpl('sidebarLabel', app.docs.all(), {
        checked: true
      }) + this.tmpl('sidebarLabel', app.disabledDocs.all()) + this.tmpl('sidebarVote') + this.tmpl('sidebarSave'));
      this.refreshElements();
      this.delay(function() {
        this.el.offsetWidth;
        return this.addClass('_in');
      });
    };

    DocPicker.prototype.empty = function() {
      this.resetClass();
      DocPicker.__super__.empty.apply(this, arguments);
    };

    DocPicker.prototype.save = function() {
      var disabledDocs, doc, docs;
      if (!this.saving) {
        this.saving = true;
        docs = this.getSelectedDocs();
        app.settings.setDocs(docs);
        this.saveLink.textContent = app.appCache ? 'Downloading\u2026' : 'Saving\u2026';
        disabledDocs = new app.collections.Docs((function() {
          var _i, _len, _ref, _results;
          _ref = app.docs.all();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            doc = _ref[_i];
            if (docs.indexOf(doc.slug) === -1) {
              _results.push(doc);
            }
          }
          return _results;
        })());
        disabledDocs.uninstall(function() {
          return app.reload();
        });
      }
    };

    DocPicker.prototype.getSelectedDocs = function() {
      var input, _i, _len, _ref, _results;
      _ref = this.findAllByTag('input');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        if (input != null ? input.checked : void 0) {
          _results.push(input.name);
        }
      }
      return _results;
    };

    DocPicker.prototype.onClick = function(event) {
      if (event.target === this.saveLink) {
        $.stopEvent(event);
        this.save();
      }
    };

    DocPicker.prototype.onFocus = function(event) {
      return $.scrollTo(event.target.parentNode, null, 'continuous', {
        bottomGap: 2
      });
    };

    DocPicker.prototype.onEnter = function() {
      this.save();
    };

    DocPicker.prototype.onAppCacheProgress = function(event) {
      var percentage;
      if (event.lengthComputable) {
        percentage = Math.round(event.loaded * 100 / event.total);
        this.saveLink.textContent = "Downloading\u2026 (" + percentage + "%)";
      }
    };

    return DocPicker;

  })(app.View);

}).call(this);
