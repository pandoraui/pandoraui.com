// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  app.views.Sidebar = (function(_super) {
    __extends(Sidebar, _super);

    function Sidebar() {
      this.onEscape = __bind(this.onEscape, this);
      this.onAltR = __bind(this.onAltR, this);
      this.onGlobalClick = __bind(this.onGlobalClick, this);
      this.onClick = __bind(this.onClick, this);
      this.onFocus = __bind(this.onFocus, this);
      this.showResults = __bind(this.showResults, this);
      this.showDocPicker = __bind(this.showDocPicker, this);
      this.showDocList = __bind(this.showDocList, this);
      return Sidebar.__super__.constructor.apply(this, arguments);
    }

    Sidebar.el = '._sidebar';

    Sidebar.events = {
      focus: 'onFocus',
      click: 'onClick'
    };

    Sidebar.shortcuts = {
      altR: 'onAltR',
      escape: 'onEscape'
    };

    Sidebar.prototype.init = function() {
      if (!(app.isMobile() || $.isTouchScreen())) {
        this.addSubview(this.hover = new app.views.SidebarHover(this.el));
      }
      this.addSubview(this.search = new app.views.Search);
      this.search.on('searching', this.showResults).on('clear', this.showDocList);
      this.results = new app.views.Results(this.search);
      this.docList = new app.views.DocList;
      if (!app.isSingleDoc()) {
        this.docPicker = new app.views.DocPicker;
      }
      app.on('ready', this.showDocList);
      if (this.docPicker) {
        $.on(document, 'click', this.onGlobalClick);
      }
    };

    Sidebar.prototype.show = function(view) {
      var _ref, _ref1;
      if (this.view !== view) {
        if ((_ref = this.hover) != null) {
          _ref.hide();
        }
        this.saveScrollPosition();
        if ((_ref1 = this.view) != null) {
          _ref1.deactivate();
        }
        this.html(this.view = view);
        if (this.view === this.docList && this.docPicker) {
          this.append(this.tmpl('sidebarSettings'));
        }
        this.view.activate();
        this.restoreScrollPosition();
      }
    };

    Sidebar.prototype.showDocList = function(reset) {
      this.show(this.docList);
      if (reset === true) {
        this.docList.reset({
          revealCurrent: true
        });
        this.search.reset();
      }
    };

    Sidebar.prototype.showDocPicker = function() {
      this.show(this.docPicker);
    };

    Sidebar.prototype.showResults = function() {
      this.show(this.results);
    };

    Sidebar.prototype.reset = function() {
      return this.showDocList(true);
    };

    Sidebar.prototype.saveScrollPosition = function() {
      if (this.view === this.docList) {
        this.scrollTop = this.el.scrollTop;
      }
    };

    Sidebar.prototype.restoreScrollPosition = function() {
      if (this.view === this.docList && this.scrollTop) {
        this.el.scrollTop = this.scrollTop;
        this.scrollTop = null;
      } else {
        this.scrollToTop();
      }
    };

    Sidebar.prototype.scrollToTop = function() {
      this.el.scrollTop = 0;
    };

    Sidebar.prototype.onFocus = function(event) {
      $.scrollTo(event.target, this.el, 'continuous', {
        bottomGap: 2
      });
    };

    Sidebar.prototype.onClick = function(event) {
      var _base, _base1;
      if (typeof (_base = event.target).hasAttribute === "function" ? _base.hasAttribute('data-reset-list') : void 0) {
        $.stopEvent(event);
        this.reset();
      } else if (typeof (_base1 = event.target).hasAttribute === "function" ? _base1.hasAttribute('data-light') : void 0) {
        $.stopEvent(event);
        app.document.toggleLight();
      }
    };

    Sidebar.prototype.onGlobalClick = function(event) {
      var _base;
      if (typeof (_base = event.target).hasAttribute === "function" ? _base.hasAttribute('data-pick-docs') : void 0) {
        $.stopEvent(event);
        this.showDocPicker();
      } else if (this.view === this.docPicker) {
        if (!$.hasChild(this.el, event.target)) {
          this.showDocList();
        }
      }
    };

    Sidebar.prototype.onAltR = function() {
      this.reset();
    };

    Sidebar.prototype.onEscape = function() {
      this.reset();
      this.scrollToTop();
    };

    return Sidebar;

  })(app.View);

}).call(this);
