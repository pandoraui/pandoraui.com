// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  app.View = (function() {
    $.extend(View.prototype, Events);

    function View() {
      this.setupElement();
      if (this.el.className) {
        this.originalClassName = this.el.className;
      }
      if (this.constructor.className) {
        this.resetClass();
      }
      this.refreshElements();
      if (typeof this.init === "function") {
        this.init();
      }
      this.refreshElements();
    }

    View.prototype.setupElement = function() {
      if (this.el == null) {
        this.el = typeof this.constructor.el === 'string' ? $(this.constructor.el) : this.constructor.el ? this.constructor.el : document.createElement(this.constructor.tagName || 'div');
      }
    };

    View.prototype.refreshElements = function() {
      var name, selector, _ref;
      if (this.constructor.elements) {
        _ref = this.constructor.elements;
        for (name in _ref) {
          selector = _ref[name];
          this[name] = this.find(selector);
        }
      }
    };

    View.prototype.addClass = function(name) {
      this.el.classList.add(name);
    };

    View.prototype.removeClass = function(name) {
      this.el.classList.remove(name);
    };

    View.prototype.resetClass = function() {
      var name, _i, _len, _ref;
      this.el.className = this.originalClassName || '';
      if (this.constructor.className) {
        _ref = this.constructor.className.split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          this.addClass(name);
        }
      }
    };

    View.prototype.find = function(selector) {
      return $(selector, this.el);
    };

    View.prototype.findAll = function(selector) {
      return $$(selector, this.el);
    };

    View.prototype.findByClass = function(name) {
      return this.findAllByClass(name)[0];
    };

    View.prototype.findLastByClass = function(name) {
      var all;
      all = this.findAllByClass(name)[0];
      return all[all.length - 1];
    };

    View.prototype.findAllByClass = function(name) {
      return this.el.getElementsByClassName(name);
    };

    View.prototype.findByTag = function(tag) {
      return this.findAllByTag(tag)[0];
    };

    View.prototype.findLastByTag = function(tag) {
      var all;
      all = this.findAllByTag(tag);
      return all[all.length - 1];
    };

    View.prototype.findAllByTag = function(tag) {
      return this.el.getElementsByTagName(tag);
    };

    View.prototype.append = function(value) {
      $.append(this.el, value.el || value);
    };

    View.prototype.appendTo = function(value) {
      $.append(value.el || value, this.el);
    };

    View.prototype.prepend = function(value) {
      $.prepend(this.el, value.el || value);
    };

    View.prototype.prependTo = function(value) {
      $.prepend(value.el || value, this.el);
    };

    View.prototype.before = function(value) {
      $.before(this.el, value.el || value);
    };

    View.prototype.after = function(value) {
      $.after(this.el, value.el || value);
    };

    View.prototype.remove = function(value) {
      $.remove(value.el || value);
    };

    View.prototype.empty = function() {
      $.empty(this.el);
      this.refreshElements();
    };

    View.prototype.html = function(value) {
      this.empty();
      this.append(value);
    };

    View.prototype.tmpl = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = app.templates).render.apply(_ref, args);
    };

    View.prototype.delay = function() {
      var args, delay, fn;
      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      delay = typeof args[args.length - 1] === 'number' ? args.pop() : 0;
      return setTimeout(fn.bind.apply(fn, [this].concat(__slice.call(args))), delay);
    };

    View.prototype.onDOM = function(event, callback) {
      $.on(this.el, event, callback);
    };

    View.prototype.offDOM = function(event, callback) {
      $.off(this.el, event, callback);
    };

    View.prototype.bindEvents = function() {
      var method, name, _ref, _ref1, _ref2;
      if (this.constructor.events) {
        _ref = this.constructor.events;
        for (name in _ref) {
          method = _ref[name];
          this.onDOM(name, this[method]);
        }
      }
      if (this.constructor.routes) {
        _ref1 = this.constructor.routes;
        for (name in _ref1) {
          method = _ref1[name];
          app.router.on(name, this[method]);
        }
      }
      if (this.constructor.shortcuts) {
        _ref2 = this.constructor.shortcuts;
        for (name in _ref2) {
          method = _ref2[name];
          app.shortcuts.on(name, this[method]);
        }
      }
    };

    View.prototype.unbindEvents = function() {
      var method, name, _ref, _ref1, _ref2;
      if (this.constructor.events) {
        _ref = this.constructor.events;
        for (name in _ref) {
          method = _ref[name];
          this.offDOM(name, this[method]);
        }
      }
      if (this.constructor.routes) {
        _ref1 = this.constructor.routes;
        for (name in _ref1) {
          method = _ref1[name];
          app.router.off(name, this[method]);
        }
      }
      if (this.constructor.shortcuts) {
        _ref2 = this.constructor.shortcuts;
        for (name in _ref2) {
          method = _ref2[name];
          app.shortcuts.off(name, this[method]);
        }
      }
    };

    View.prototype.addSubview = function(view) {
      return (this.subviews || (this.subviews = [])).push(view);
    };

    View.prototype.activate = function() {
      var view, _i, _len, _ref;
      if (this.activated) {
        return;
      }
      this.bindEvents();
      if (this.subviews) {
        _ref = this.subviews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          view.activate();
        }
      }
      this.activated = true;
      return true;
    };

    View.prototype.deactivate = function() {
      var view, _i, _len, _ref;
      if (!this.activated) {
        return;
      }
      this.unbindEvents();
      if (this.subviews) {
        _ref = this.subviews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          view.deactivate();
        }
      }
      this.activated = false;
      return true;
    };

    View.prototype.detach = function() {
      this.deactivate();
      $.remove(this.el);
    };

    return View;

  })();

}).call(this);
